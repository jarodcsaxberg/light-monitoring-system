ARM GAS  /tmp/cc5eZ8De.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB511:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** #include "retarget.h"
  28:Src/main.c    **** #include <string.h>
  29:Src/main.c    **** #include <stdlib.h>
  30:Src/main.c    **** #include "stm32l4xx_ll_usart.h"
  31:Src/main.c    **** #include "command.h"
ARM GAS  /tmp/cc5eZ8De.s 			page 2


  32:Src/main.c    **** #include "buffer.h"
  33:Src/main.c    **** #include "rtc.h"
  34:Src/main.c    **** #include "sensor.h"
  35:Src/main.c    **** #include "log.h"
  36:Src/main.c    **** /* USER CODE END Includes */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PTD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PD */
  45:Src/main.c    **** /* USER CODE END PD */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  48:Src/main.c    **** /* USER CODE BEGIN PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END PM */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** ADC_HandleTypeDef hadc1;
  54:Src/main.c    **** RTC_HandleTypeDef hrtc;
  55:Src/main.c    **** TIM_HandleTypeDef htim2;
  56:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch1;
  57:Src/main.c    **** UART_HandleTypeDef huart2;
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE BEGIN PV */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE END PV */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  64:Src/main.c    **** void SystemClock_Config(void);
  65:Src/main.c    **** static void MX_GPIO_Init(void);
  66:Src/main.c    **** static void MX_USART2_UART_Init(void);
  67:Src/main.c    **** static void MX_RTC_Init(void);
  68:Src/main.c    **** static void MX_ADC1_Init(void);
  69:Src/main.c    **** static void MX_DMA_Init(void);
  70:Src/main.c    **** static void MX_TIM2_Init(void);
  71:Src/main.c    **** /* USER CODE BEGIN PFP */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PFP */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  76:Src/main.c    **** /* USER CODE BEGIN 0 */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END 0 */
  79:Src/main.c    **** 
  80:Src/main.c    **** /**
  81:Src/main.c    ****   * @brief  The application entry point.
  82:Src/main.c    ****   * @retval int
  83:Src/main.c    ****   */
  84:Src/main.c    **** int main(void)
  85:Src/main.c    **** {
  86:Src/main.c    ****   /* USER CODE BEGIN 1 */
  87:Src/main.c    ****   /* USER CODE END 1 */
  88:Src/main.c    ****   
ARM GAS  /tmp/cc5eZ8De.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  91:Src/main.c    **** 
  92:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  93:Src/main.c    ****   HAL_Init();
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE BEGIN Init */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END Init */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Configure the system clock */
 100:Src/main.c    ****   SystemClock_Config();
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END SysInit */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Initialize all configured peripherals */
 107:Src/main.c    ****   MX_GPIO_Init();
 108:Src/main.c    ****   MX_USART2_UART_Init();
 109:Src/main.c    ****   MX_RTC_Init();
 110:Src/main.c    ****   MX_ADC1_Init();
 111:Src/main.c    ****   MX_DMA_Init();
 112:Src/main.c    ****   MX_TIM2_Init();
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 114:Src/main.c    ****   RetargetInit(&huart2);
 115:Src/main.c    ****   //sends local RTC handler variable to rtc.c file scope
 116:Src/main.c    ****   RetargetRTC(&hrtc);
 117:Src/main.c    ****   
 118:Src/main.c    ****   // if necessary to erase flash, uncomment
 119:Src/main.c    ****   //flash_erase();
 120:Src/main.c    ****   
 121:Src/main.c    ****   if(flash_write_init()) {
 122:Src/main.c    ****     printf("Flash initialization failed\r\n");
 123:Src/main.c    ****     while(1);
 124:Src/main.c    ****   }
 125:Src/main.c    ****   //calibrates ADC
 126:Src/main.c    ****   while (HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK); 
 127:Src/main.c    ****   
 128:Src/main.c    **** 
 129:Src/main.c    ****   log_entry("start");
 130:Src/main.c    ****   printf("Welcome to Nucleo\r\n");
 131:Src/main.c    ****   printf("Type 'help' to see available commands\r\n");
 132:Src/main.c    **** 
 133:Src/main.c    ****   HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 134:Src/main.c    **** 
 135:Src/main.c    ****   terminal_line();
 136:Src/main.c    ****   /* USER CODE END 2 */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Infinite loop */
 139:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 140:Src/main.c    ****   while (1)
 141:Src/main.c    ****   {
 142:Src/main.c    ****     /* USER CODE END WHILE */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* USER CODE BEGIN 3 */
 145:Src/main.c    ****     buf_process();
ARM GAS  /tmp/cc5eZ8De.s 			page 4


 146:Src/main.c    ****     alarm_process();
 147:Src/main.c    ****   }
 148:Src/main.c    ****   /* USER CODE END 3 */
 149:Src/main.c    **** }
 150:Src/main.c    **** 
 151:Src/main.c    **** /**
 152:Src/main.c    ****   * @brief System Clock Configuration
 153:Src/main.c    ****   * @retval None
 154:Src/main.c    ****   */
 155:Src/main.c    **** void SystemClock_Config(void)
 156:Src/main.c    **** {
 157:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 158:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 159:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 160:Src/main.c    **** 
 161:Src/main.c    ****   /** Configure LSE Drive Capability 
 162:Src/main.c    ****   */
 163:Src/main.c    ****   HAL_PWR_EnableBkUpAccess();
 164:Src/main.c    ****   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 165:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 166:Src/main.c    ****   */
 167:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 168:Src/main.c    ****                               |RCC_OSCILLATORTYPE_MSI;
 169:Src/main.c    ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 170:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 171:Src/main.c    ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 172:Src/main.c    ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 173:Src/main.c    ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 16;
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 181:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     Error_Handler();
 184:Src/main.c    ****   }
 185:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 186:Src/main.c    ****   */
 187:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 188:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 189:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 190:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 191:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 192:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 193:Src/main.c    **** 
 194:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 195:Src/main.c    ****   {
 196:Src/main.c    ****     Error_Handler();
 197:Src/main.c    ****   }
 198:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 199:Src/main.c    ****                               |RCC_PERIPHCLK_ADC;
 200:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 201:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 202:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
ARM GAS  /tmp/cc5eZ8De.s 			page 5


 203:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 204:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 205:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 206:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 207:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 208:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 209:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 210:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 211:Src/main.c    ****   {
 212:Src/main.c    ****     Error_Handler();
 213:Src/main.c    ****   }
 214:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 215:Src/main.c    ****   */
 216:Src/main.c    ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 217:Src/main.c    ****   {
 218:Src/main.c    ****     Error_Handler();
 219:Src/main.c    ****   }
 220:Src/main.c    ****   /** Enable MSI Auto calibration 
 221:Src/main.c    ****   */
 222:Src/main.c    ****   HAL_RCCEx_EnableMSIPLLMode();
 223:Src/main.c    **** }
 224:Src/main.c    **** 
 225:Src/main.c    **** /**
 226:Src/main.c    ****   * @brief ADC1 Initialization Function
 227:Src/main.c    ****   * @param None
 228:Src/main.c    ****   * @retval None
 229:Src/main.c    ****   */
 230:Src/main.c    **** static void MX_ADC1_Init(void)
 231:Src/main.c    **** {
 232:Src/main.c    **** 
 233:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 234:Src/main.c    **** 
 235:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 236:Src/main.c    **** 
 237:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 238:Src/main.c    **** 
 239:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 242:Src/main.c    ****   /** Common config 
 243:Src/main.c    ****   */
 244:Src/main.c    ****   hadc1.Instance = ADC1;
 245:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 246:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 247:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 248:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 249:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 250:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 251:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 252:Src/main.c    ****   hadc1.Init.NbrOfConversion = 3;
 253:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 254:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 255:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 256:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 257:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 258:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 259:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
ARM GAS  /tmp/cc5eZ8De.s 			page 6


 260:Src/main.c    ****   {
 261:Src/main.c    ****     Error_Handler();
 262:Src/main.c    ****   }
 263:Src/main.c    ****   /** Configure Regular Channel 
 264:Src/main.c    ****   */
 265:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_VREFINT;
 266:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 267:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 268:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 269:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 270:Src/main.c    ****   sConfig.Offset = 0;
 271:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     Error_Handler();
 274:Src/main.c    ****   }
 275:Src/main.c    ****   /** Configure Regular Channel 
 276:Src/main.c    ****   */
 277:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 278:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 279:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 280:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 281:Src/main.c    ****   {
 282:Src/main.c    ****     Error_Handler();
 283:Src/main.c    ****   }
 284:Src/main.c    ****   /** Configure Regular Channel 
 285:Src/main.c    ****   */
 286:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_VBAT;
 287:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 288:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 289:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     Error_Handler();
 292:Src/main.c    ****   }
 293:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 296:Src/main.c    **** 
 297:Src/main.c    **** }
 298:Src/main.c    **** 
 299:Src/main.c    **** /**
 300:Src/main.c    ****   * @brief RTC Initialization Function
 301:Src/main.c    ****   * @param None
 302:Src/main.c    ****   * @retval None
 303:Src/main.c    ****   */
 304:Src/main.c    **** static void MX_RTC_Init(void)
 305:Src/main.c    **** {
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 310:Src/main.c    **** 
 311:Src/main.c    ****   RTC_TimeTypeDef sTime = {0};
 312:Src/main.c    ****   RTC_DateTypeDef sDate = {0};
 313:Src/main.c    ****   RTC_AlarmTypeDef sAlarm = {0};
 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 316:Src/main.c    **** 
ARM GAS  /tmp/cc5eZ8De.s 			page 7


 317:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 318:Src/main.c    ****   /** Initialize RTC Only 
 319:Src/main.c    ****   */
 320:Src/main.c    ****   hrtc.Instance = RTC;
 321:Src/main.c    ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 322:Src/main.c    ****   hrtc.Init.AsynchPrediv = 127;
 323:Src/main.c    ****   hrtc.Init.SynchPrediv = 255;
 324:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 325:Src/main.c    ****   hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 326:Src/main.c    ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 327:Src/main.c    ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 328:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 329:Src/main.c    ****   {
 330:Src/main.c    ****     Error_Handler();
 331:Src/main.c    ****   }
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* USER CODE BEGIN Check_RTC_BKUP */
 334:Src/main.c    ****     
 335:Src/main.c    ****   /* USER CODE END Check_RTC_BKUP */
 336:Src/main.c    **** 
 337:Src/main.c    ****   /** Initialize RTC and set the Time and Date 
 338:Src/main.c    ****   */
 339:Src/main.c    ****   sTime.Hours = 0x0;
 340:Src/main.c    ****   sTime.Minutes = 0x0;
 341:Src/main.c    ****   sTime.Seconds = 0x0;
 342:Src/main.c    ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 343:Src/main.c    ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 344:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 345:Src/main.c    ****   {
 346:Src/main.c    ****     Error_Handler();
 347:Src/main.c    ****   }
 348:Src/main.c    ****   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 349:Src/main.c    ****   sDate.Month = RTC_MONTH_JANUARY;
 350:Src/main.c    ****   sDate.Date = 0x1;
 351:Src/main.c    ****   sDate.Year = 0x0;
 352:Src/main.c    **** 
 353:Src/main.c    ****   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 354:Src/main.c    ****   {
 355:Src/main.c    ****     Error_Handler();
 356:Src/main.c    ****   }
 357:Src/main.c    ****   /** Enable the Alarm A 
 358:Src/main.c    ****   */
 359:Src/main.c    ****   sAlarm.AlarmTime.Hours = 0x0;
 360:Src/main.c    ****   sAlarm.AlarmTime.Minutes = 0x0;
 361:Src/main.c    ****   sAlarm.AlarmTime.Seconds = 0x30;
 362:Src/main.c    ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 363:Src/main.c    ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 364:Src/main.c    ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 365:Src/main.c    ****   sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 366:Src/main.c    ****                               |RTC_ALARMMASK_MINUTES;
 367:Src/main.c    ****   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 368:Src/main.c    ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 369:Src/main.c    ****   sAlarm.AlarmDateWeekDay = 0x1;
 370:Src/main.c    ****   sAlarm.Alarm = RTC_ALARM_A;
 371:Src/main.c    ****   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 372:Src/main.c    ****   {
 373:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/cc5eZ8De.s 			page 8


 374:Src/main.c    ****   }
 375:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 376:Src/main.c    **** 
 377:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 378:Src/main.c    **** 
 379:Src/main.c    **** }
 380:Src/main.c    **** 
 381:Src/main.c    **** /**
 382:Src/main.c    ****   * @brief TIM2 Initialization Function
 383:Src/main.c    ****   * @param None
 384:Src/main.c    ****   * @retval None
 385:Src/main.c    ****   */
 386:Src/main.c    **** static void MX_TIM2_Init(void)
 387:Src/main.c    **** {
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 390:Src/main.c    **** 
 391:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 392:Src/main.c    **** 
 393:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 394:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 397:Src/main.c    **** 
 398:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 399:Src/main.c    ****   htim2.Instance = TIM2;
 400:Src/main.c    ****   htim2.Init.Prescaler = 0;
 401:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 402:Src/main.c    ****   htim2.Init.Period = 65535;
 403:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 404:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 405:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 406:Src/main.c    ****   {
 407:Src/main.c    ****     Error_Handler();
 408:Src/main.c    ****   }
 409:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 410:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 411:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 412:Src/main.c    ****   {
 413:Src/main.c    ****     Error_Handler();
 414:Src/main.c    ****   }
 415:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 416:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 417:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 418:Src/main.c    ****   sConfigIC.ICFilter = 0;
 419:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 420:Src/main.c    ****   {
 421:Src/main.c    ****     Error_Handler();
 422:Src/main.c    ****   }
 423:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 424:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 425:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 426:Src/main.c    **** 
 427:Src/main.c    **** }
 428:Src/main.c    **** 
 429:Src/main.c    **** /**
 430:Src/main.c    ****   * @brief USART2 Initialization Function
ARM GAS  /tmp/cc5eZ8De.s 			page 9


 431:Src/main.c    ****   * @param None
 432:Src/main.c    ****   * @retval None
 433:Src/main.c    ****   */
 434:Src/main.c    **** static void MX_USART2_UART_Init(void)
 435:Src/main.c    **** {
 436:Src/main.c    **** 
 437:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 438:Src/main.c    **** 
 439:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 440:Src/main.c    **** 
 441:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 442:Src/main.c    **** 
 443:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 444:Src/main.c    ****   huart2.Instance = USART2;
 445:Src/main.c    ****   huart2.Init.BaudRate = 9600;
 446:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 447:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 448:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 449:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 450:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 451:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 452:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 453:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 454:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 455:Src/main.c    ****   {
 456:Src/main.c    ****     Error_Handler();
 457:Src/main.c    ****   }
 458:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 459:Src/main.c    ****   LL_USART_EnableIT_RXNE(USART2);
 460:Src/main.c    **** 
 461:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 462:Src/main.c    **** 
 463:Src/main.c    **** }
 464:Src/main.c    **** 
 465:Src/main.c    **** /** 
 466:Src/main.c    ****   * Enable DMA controller clock
 467:Src/main.c    ****   */
 468:Src/main.c    **** static void MX_DMA_Init(void) 
 469:Src/main.c    **** {
 470:Src/main.c    **** 
 471:Src/main.c    ****   /* DMA controller clock enable */
 472:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 473:Src/main.c    **** 
 474:Src/main.c    ****   /* DMA interrupt init */
 475:Src/main.c    ****   /* DMA1_Channel5_IRQn interrupt configuration */
 476:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 477:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 478:Src/main.c    **** 
 479:Src/main.c    **** }
 480:Src/main.c    **** 
 481:Src/main.c    **** /**
 482:Src/main.c    ****   * @brief GPIO Initialization Function
 483:Src/main.c    ****   * @param None
 484:Src/main.c    ****   * @retval None
 485:Src/main.c    ****   */
 486:Src/main.c    **** static void MX_GPIO_Init(void)
 487:Src/main.c    **** {
ARM GAS  /tmp/cc5eZ8De.s 			page 10


  28              		.loc 1 487 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 488:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 488 3 view .LVU1
  42              		.loc 1 488 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
 489:Src/main.c    **** 
 490:Src/main.c    ****   /* GPIO Ports Clock Enable */
 491:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 491 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 491 3 view .LVU4
  52              		.loc 1 491 3 view .LVU5
  53 0010 164B     		ldr	r3, .L3
  54 0012 DA6C     		ldr	r2, [r3, #76]
  55 0014 42F00402 		orr	r2, r2, #4
  56 0018 DA64     		str	r2, [r3, #76]
  57              		.loc 1 491 3 view .LVU6
  58 001a DA6C     		ldr	r2, [r3, #76]
  59 001c 02F00402 		and	r2, r2, #4
  60 0020 0092     		str	r2, [sp]
  61              		.loc 1 491 3 view .LVU7
  62 0022 009A     		ldr	r2, [sp]
  63              	.LBE4:
  64              		.loc 1 491 3 view .LVU8
 492:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  65              		.loc 1 492 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 492 3 view .LVU10
  68              		.loc 1 492 3 view .LVU11
  69 0024 DA6C     		ldr	r2, [r3, #76]
  70 0026 42F00102 		orr	r2, r2, #1
  71 002a DA64     		str	r2, [r3, #76]
  72              		.loc 1 492 3 view .LVU12
  73 002c DA6C     		ldr	r2, [r3, #76]
  74 002e 02F00102 		and	r2, r2, #1
  75 0032 0192     		str	r2, [sp, #4]
  76              		.loc 1 492 3 view .LVU13
  77 0034 019A     		ldr	r2, [sp, #4]
  78              	.LBE5:
  79              		.loc 1 492 3 view .LVU14
ARM GAS  /tmp/cc5eZ8De.s 			page 11


 493:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 493 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 493 3 view .LVU16
  83              		.loc 1 493 3 view .LVU17
  84 0036 DA6C     		ldr	r2, [r3, #76]
  85 0038 42F00202 		orr	r2, r2, #2
  86 003c DA64     		str	r2, [r3, #76]
  87              		.loc 1 493 3 view .LVU18
  88 003e DB6C     		ldr	r3, [r3, #76]
  89 0040 03F00203 		and	r3, r3, #2
  90 0044 0293     		str	r3, [sp, #8]
  91              		.loc 1 493 3 view .LVU19
  92 0046 029B     		ldr	r3, [sp, #8]
  93              	.LBE6:
  94              		.loc 1 493 3 view .LVU20
 494:Src/main.c    **** 
 495:Src/main.c    ****   /*Configure GPIO pin Output Level */
 496:Src/main.c    ****   HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
  95              		.loc 1 496 3 view .LVU21
  96 0048 094D     		ldr	r5, .L3+4
  97 004a 2246     		mov	r2, r4
  98 004c 0821     		movs	r1, #8
  99 004e 2846     		mov	r0, r5
 100 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 497:Src/main.c    **** 
 498:Src/main.c    ****   /*Configure GPIO pin : LD3_Pin */
 499:Src/main.c    ****   GPIO_InitStruct.Pin = LD3_Pin;
 102              		.loc 1 499 3 view .LVU22
 103              		.loc 1 499 23 is_stmt 0 view .LVU23
 104 0054 0823     		movs	r3, #8
 105 0056 0393     		str	r3, [sp, #12]
 500:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 106              		.loc 1 500 3 is_stmt 1 view .LVU24
 107              		.loc 1 500 24 is_stmt 0 view .LVU25
 108 0058 0123     		movs	r3, #1
 109 005a 0493     		str	r3, [sp, #16]
 501:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 110              		.loc 1 501 3 is_stmt 1 view .LVU26
 111              		.loc 1 501 24 is_stmt 0 view .LVU27
 112 005c 0594     		str	r4, [sp, #20]
 502:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 113              		.loc 1 502 3 is_stmt 1 view .LVU28
 114              		.loc 1 502 25 is_stmt 0 view .LVU29
 115 005e 0694     		str	r4, [sp, #24]
 503:Src/main.c    ****   HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 116              		.loc 1 503 3 is_stmt 1 view .LVU30
 117 0060 03A9     		add	r1, sp, #12
 118 0062 2846     		mov	r0, r5
 119 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 120              	.LVL1:
 504:Src/main.c    **** 
 505:Src/main.c    **** }
 121              		.loc 1 505 1 is_stmt 0 view .LVU31
 122 0068 09B0     		add	sp, sp, #36
 123              	.LCFI2:
ARM GAS  /tmp/cc5eZ8De.s 			page 12


 124              		.cfi_def_cfa_offset 12
 125              		@ sp needed
 126 006a 30BD     		pop	{r4, r5, pc}
 127              	.L4:
 128              		.align	2
 129              	.L3:
 130 006c 00100240 		.word	1073876992
 131 0070 00040048 		.word	1207960576
 132              		.cfi_endproc
 133              	.LFE511:
 135              		.section	.text.MX_DMA_Init,"ax",%progbits
 136              		.align	1
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu fpv4-sp-d16
 142              	MX_DMA_Init:
 143              	.LFB510:
 469:Src/main.c    **** 
 144              		.loc 1 469 1 is_stmt 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 8
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148 0000 00B5     		push	{lr}
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 4
 151              		.cfi_offset 14, -4
 152 0002 83B0     		sub	sp, sp, #12
 153              	.LCFI4:
 154              		.cfi_def_cfa_offset 16
 472:Src/main.c    **** 
 155              		.loc 1 472 3 view .LVU33
 156              	.LBB7:
 472:Src/main.c    **** 
 157              		.loc 1 472 3 view .LVU34
 472:Src/main.c    **** 
 158              		.loc 1 472 3 view .LVU35
 159 0004 0A4B     		ldr	r3, .L7
 160 0006 9A6C     		ldr	r2, [r3, #72]
 161 0008 42F00102 		orr	r2, r2, #1
 162 000c 9A64     		str	r2, [r3, #72]
 472:Src/main.c    **** 
 163              		.loc 1 472 3 view .LVU36
 164 000e 9B6C     		ldr	r3, [r3, #72]
 165 0010 03F00103 		and	r3, r3, #1
 166 0014 0193     		str	r3, [sp, #4]
 472:Src/main.c    **** 
 167              		.loc 1 472 3 view .LVU37
 168 0016 019B     		ldr	r3, [sp, #4]
 169              	.LBE7:
 472:Src/main.c    **** 
 170              		.loc 1 472 3 view .LVU38
 476:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 171              		.loc 1 476 3 view .LVU39
 172 0018 0022     		movs	r2, #0
 173 001a 1146     		mov	r1, r2
 174 001c 0F20     		movs	r0, #15
ARM GAS  /tmp/cc5eZ8De.s 			page 13


 175 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 176              	.LVL2:
 477:Src/main.c    **** 
 177              		.loc 1 477 3 view .LVU40
 178 0022 0F20     		movs	r0, #15
 179 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 180              	.LVL3:
 479:Src/main.c    **** 
 181              		.loc 1 479 1 is_stmt 0 view .LVU41
 182 0028 03B0     		add	sp, sp, #12
 183              	.LCFI5:
 184              		.cfi_def_cfa_offset 4
 185              		@ sp needed
 186 002a 5DF804FB 		ldr	pc, [sp], #4
 187              	.L8:
 188 002e 00BF     		.align	2
 189              	.L7:
 190 0030 00100240 		.word	1073876992
 191              		.cfi_endproc
 192              	.LFE510:
 194              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 195              		.align	2
 196              	.LC0:
 197 0000 4E4F4B3A 		.ascii	"NOK: (Error_Handler)\015\000"
 197      20284572 
 197      726F725F 
 197      48616E64 
 197      6C657229 
 198              		.section	.text.Error_Handler,"ax",%progbits
 199              		.align	1
 200              		.global	Error_Handler
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	Error_Handler:
 207              	.LFB512:
 506:Src/main.c    **** 
 507:Src/main.c    **** /* USER CODE BEGIN 4 */
 508:Src/main.c    **** 
 509:Src/main.c    **** /* USER CODE END 4 */
 510:Src/main.c    **** 
 511:Src/main.c    **** /**
 512:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 513:Src/main.c    ****   * @retval None
 514:Src/main.c    ****   */
 515:Src/main.c    **** void Error_Handler(void)
 516:Src/main.c    **** {
 208              		.loc 1 516 1 is_stmt 1 view -0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212 0000 08B5     		push	{r3, lr}
 213              	.LCFI6:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 3, -8
 216              		.cfi_offset 14, -4
ARM GAS  /tmp/cc5eZ8De.s 			page 14


 517:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 518:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 519:Src/main.c    ****   printf("NOK: (Error_Handler)\r\n");
 217              		.loc 1 519 3 view .LVU43
 218 0002 0248     		ldr	r0, .L11
 219 0004 FFF7FEFF 		bl	puts
 220              	.LVL4:
 520:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 521:Src/main.c    **** }
 221              		.loc 1 521 1 is_stmt 0 view .LVU44
 222 0008 08BD     		pop	{r3, pc}
 223              	.L12:
 224 000a 00BF     		.align	2
 225              	.L11:
 226 000c 00000000 		.word	.LC0
 227              		.cfi_endproc
 228              	.LFE512:
 230              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 231              		.align	1
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu fpv4-sp-d16
 237              	MX_USART2_UART_Init:
 238              	.LFB509:
 435:Src/main.c    **** 
 239              		.loc 1 435 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243 0000 08B5     		push	{r3, lr}
 244              	.LCFI7:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 3, -8
 247              		.cfi_offset 14, -4
 444:Src/main.c    ****   huart2.Init.BaudRate = 9600;
 248              		.loc 1 444 3 view .LVU46
 444:Src/main.c    ****   huart2.Init.BaudRate = 9600;
 249              		.loc 1 444 19 is_stmt 0 view .LVU47
 250 0002 0E48     		ldr	r0, .L17
 251 0004 0E4B     		ldr	r3, .L17+4
 252 0006 0360     		str	r3, [r0]
 445:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 253              		.loc 1 445 3 is_stmt 1 view .LVU48
 445:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 254              		.loc 1 445 24 is_stmt 0 view .LVU49
 255 0008 4FF41653 		mov	r3, #9600
 256 000c 4360     		str	r3, [r0, #4]
 446:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 257              		.loc 1 446 3 is_stmt 1 view .LVU50
 446:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 258              		.loc 1 446 26 is_stmt 0 view .LVU51
 259 000e 0023     		movs	r3, #0
 260 0010 8360     		str	r3, [r0, #8]
 447:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 261              		.loc 1 447 3 is_stmt 1 view .LVU52
 447:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/cc5eZ8De.s 			page 15


 262              		.loc 1 447 24 is_stmt 0 view .LVU53
 263 0012 C360     		str	r3, [r0, #12]
 448:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 264              		.loc 1 448 3 is_stmt 1 view .LVU54
 448:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 265              		.loc 1 448 22 is_stmt 0 view .LVU55
 266 0014 0361     		str	r3, [r0, #16]
 449:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 267              		.loc 1 449 3 is_stmt 1 view .LVU56
 449:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 268              		.loc 1 449 20 is_stmt 0 view .LVU57
 269 0016 0C22     		movs	r2, #12
 270 0018 4261     		str	r2, [r0, #20]
 450:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 271              		.loc 1 450 3 is_stmt 1 view .LVU58
 450:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 272              		.loc 1 450 25 is_stmt 0 view .LVU59
 273 001a 8361     		str	r3, [r0, #24]
 451:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 274              		.loc 1 451 3 is_stmt 1 view .LVU60
 451:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 275              		.loc 1 451 28 is_stmt 0 view .LVU61
 276 001c C361     		str	r3, [r0, #28]
 452:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 277              		.loc 1 452 3 is_stmt 1 view .LVU62
 452:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 278              		.loc 1 452 30 is_stmt 0 view .LVU63
 279 001e 0362     		str	r3, [r0, #32]
 453:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 280              		.loc 1 453 3 is_stmt 1 view .LVU64
 453:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 281              		.loc 1 453 38 is_stmt 0 view .LVU65
 282 0020 4362     		str	r3, [r0, #36]
 454:Src/main.c    ****   {
 283              		.loc 1 454 3 is_stmt 1 view .LVU66
 454:Src/main.c    ****   {
 284              		.loc 1 454 7 is_stmt 0 view .LVU67
 285 0022 FFF7FEFF 		bl	HAL_UART_Init
 286              	.LVL5:
 454:Src/main.c    ****   {
 287              		.loc 1 454 6 view .LVU68
 288 0026 28B9     		cbnz	r0, .L16
 289              	.L14:
 459:Src/main.c    **** 
 290              		.loc 1 459 3 is_stmt 1 view .LVU69
 291              	.LVL6:
 292              	.LBB8:
 293              	.LBI8:
 294              		.file 2 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h"
   1:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
   2:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @file    stm32l4xx_ll_usart.h
   4:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @attention
   8:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *
ARM GAS  /tmp/cc5eZ8De.s 			page 16


   9:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *
  12:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *
  17:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   ******************************************************************************
  18:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  19:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  20:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #ifndef STM32L4xx_LL_USART_H
  22:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define STM32L4xx_LL_USART_H
  23:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  24:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #ifdef __cplusplus
  25:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** extern "C" {
  26:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif
  27:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  28:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #include "stm32l4xx.h"
  30:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  31:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @addtogroup STM32L4xx_LL_Driver
  32:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  33:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  34:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  35:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5)
  36:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  37:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL USART
  38:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  39:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  40:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  41:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
  44:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Variables USART Private Variables
  45:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  46:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  47:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Array used to get the USART prescaler division decimal values versus @ref USART_LL_EC_PRESCALER 
  48:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** static const uint32_t USART_PRESCALER_TAB[] =
  49:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
  50:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   1UL,
  51:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   2UL,
  52:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   4UL,
  53:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   6UL,
  54:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   8UL,
  55:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   10UL,
  56:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   12UL,
  57:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   16UL,
  58:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   32UL,
  59:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   64UL,
  60:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   128UL,
  61:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   256UL
  62:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** };
  63:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  64:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
  65:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc5eZ8De.s 			page 17


  66:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
  67:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  68:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  69:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  70:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  71:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  72:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  73:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
  74:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  75:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  76:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  77:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  78:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  79:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  80:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  81:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  82:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
  83:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  84:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  85:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  86:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  87:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  88:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  89:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
  90:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  91:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
  92:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
  93:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  94:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
  95:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** typedef struct
  96:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
  97:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
  98:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t PrescalerValue;            /*!< Specifies the Prescaler to compute the communication bau
  99:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PRESCA
 100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
 105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
 109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
 110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  /tmp/cc5eZ8De.s 			page 18


 123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** } LL_USART_InitTypeDef;
 139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** typedef struct
 144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
ARM GAS  /tmp/cc5eZ8De.s 			page 19


 180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error fla
 188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error fl
 189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_NECF                       USART_ICR_NECF                /*!< Noise error dete
 190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error fl
 191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_TXFECF                     USART_ICR_TXFECF              /*!< TX FIFO Empty Cl
 194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_TCBGTCF                    USART_ICR_TCBGTCF             /*!< Transmission com
 198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS flag */
 201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block fla
 203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
 204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_UDRCF                      USART_ICR_UDRCF               /*!< SPI Slave Underr
 205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
 206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXNE_RXFNE                 USART_ISR_RXNE_RXFNE          /*!< Read data regist
 223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXNE                       USART_ISR_RXNE                /*!< Read data regist
 225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXE_TXFNF                  USART_ISR_TXE_TXFNF           /*!< Transmit data re
 229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXE                        USART_ISR_TXE                 /*!< Transmit data re
 231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
ARM GAS  /tmp/cc5eZ8De.s 			page 20


 237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
 238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_UDR                        USART_ISR_UDR                 /*!< SPI Slave underr
 239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
 240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXFE                       USART_ISR_TXFE                /*!< TX FIFO empty fl
 251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXFF                       USART_ISR_RXFF                /*!< RX FIFO full fla
 252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TCBGT                      USART_ISR_TCBGT               /*!< Transmission com
 255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_RXFT                       USART_ISR_RXFT                /*!< RX FIFO threshol
 258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ISR_TXFT                       USART_ISR_TXFT                /*!< TX FIFO threshol
 259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE_RXFNEIE             USART_CR1_RXNEIE_RXFNEIE      /*!< Read data regist
 271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE_TXFNFIE              USART_CR1_TXEIE_TXFNFIE       /*!< Transmit data re
 277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_TXFEIE                     USART_CR1_TXFEIE              /*!< TX FIFO empty in
 286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR1_RXFFIE                     USART_CR1_RXFFIE              /*!< RX FIFO full int
 287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_TXFTIE                     USART_CR3_TXFTIE              /*!< TX FIFO threshol
ARM GAS  /tmp/cc5eZ8De.s 			page 21


 294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_TCBGTIE                    USART_CR3_TCBGTIE             /*!< Transmission com
 297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CR3_RXFTIE                     USART_CR3_RXFTIE              /*!< RX FIFO threshol
 300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_FIFOTHRESHOLD FIFO Threshold
 307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_8              0x00000000U /*!< FIFO reaches 1/8 of its depth */
 310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_4              0x00000001U /*!< FIFO reaches 1/4 of its depth */
 311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_2              0x00000002U /*!< FIFO reaches 1/2 of its depth */
 312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_3_4              0x00000003U /*!< FIFO reaches 3/4 of its depth */
 313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_7_8              0x00000004U /*!< FIFO reaches 7/8 of its depth */
 314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_8_8              0x00000005U /*!< FIFO becomes empty for TX and full
 315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
ARM GAS  /tmp/cc5eZ8De.s 			page 22


 351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  /tmp/cc5eZ8De.s 			page 23


 408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
 409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PRESCALER Clock Source Prescaler
 410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV1                 0x00000000U                                        
 413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV2                 (USART_PRESC_PRESCALER_0)                          
 414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV4                 (USART_PRESC_PRESCALER_1)                          
 415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV6                 (USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
 416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV8                 (USART_PRESC_PRESCALER_2)                          
 417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV10                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_0)
 418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV12                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1)
 419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV16                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1 
 420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV32                (USART_PRESC_PRESCALER_3)                          
 421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV64                (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_0)
 422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV128               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1)
 423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV256               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1 
 424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
ARM GAS  /tmp/cc5eZ8De.s 			page 24


 465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
ARM GAS  /tmp/cc5eZ8De.s 			page 25


 522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Write a value in USART register
 577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __REG__ Register to be written
ARM GAS  /tmp/cc5eZ8De.s 			page 26


 579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Read a value in USART register
 586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __REG__ Register to be read
 588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Register value
 589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
 604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
 618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
 622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) (((((__PERIPHCLK__)/(U
 623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                                                                + ((__BAUDRATE__)/2U
 624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2U)\
 626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                                                 + ((__BAUDRATE__)/2U))/(__BAUDRATE_
 627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
 634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
ARM GAS  /tmp/cc5eZ8De.s 			page 27


 636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
 648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
 652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) ((((__PERIPHCLK__)/(U
 653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                                                                 + ((__BAUDRATE__)/2
 654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
 655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/
 656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
 657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
 664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
 674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART Enable
 678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
ARM GAS  /tmp/cc5eZ8De.s 			page 28


 693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
 713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  FIFO Mode Enable
 715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_EnableFIFO
 718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableFIFO(USART_TypeDef *USARTx)
 722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  FIFO Mode Disable
 728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
 731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
 735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if FIFO Mode is enabled
 741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_IsEnabledFIFO
 744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledFIFO(USART_TypeDef *USARTx)
 748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_FIFOEN) == (USART_CR1_FIFOEN)) ? 1UL : 0UL);
ARM GAS  /tmp/cc5eZ8De.s 			page 29


 750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX FIFO Threshold
 754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_SetTXFIFOThreshold
 757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return TX FIFO Threshold Configuration
 774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_GetTXFIFOThreshold
 777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXFIFOThreshold(USART_TypeDef *USARTx)
 787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure RX FIFO Threshold
 793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_SetRXFIFOThreshold
 796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
ARM GAS  /tmp/cc5eZ8De.s 			page 30


 807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return RX FIFO Threshold Configuration
 813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_GetRXFIFOThreshold
 816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXFIFOThreshold(USART_TypeDef *USARTx)
 826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX and RX FIFOs Threshold
 832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_ConfigFIFOsThreshold\n
 835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          RXFTCFG       LL_USART_ConfigFIFOsThreshold
 836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  TXThreshold This parameter can be one of the following values:
 838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  RXThreshold This parameter can be one of the following values:
 845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigFIFOsThreshold(USART_TypeDef *USARTx, uint32_t TXThreshold, uin
 854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG | USART_CR3_RXFTCFG, (TXThreshold << USART_CR3_TXFTCFG_
 856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
 859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc5eZ8De.s 			page 31


 864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UESM);
 872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM)) ? 1UL : 0UL);
 899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR3_UCESM)
 902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART Clock enabled in STOP Mode
 904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is called, USART Clock is enabled while in STOP mode
 905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_EnableClockInStopMode
 906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableClockInStopMode(USART_TypeDef *USARTx)
 910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_UCESM);
 912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  USART clock disabled in STOP Mode
 916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   When this function is called, USART Clock is disabled while in STOP mode
 917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_DisableClockInStopMode
 918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc5eZ8De.s 			page 32


 921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableClockInStopMode(USART_TypeDef *USARTx)
 922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_UCESM);
 924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if USART clock is enabled in STOP Mode
 928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_IsClockEnabledInStopMode
 929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsClockEnabledInStopMode(USART_TypeDef *USARTx)
 933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_UCESM) == (USART_CR3_UCESM));
 935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR3_UCESM */
 938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Receiver Disable
 951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Transmitter Enable
 962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Transmitter Disable
 973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc5eZ8De.s 			page 33


 978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
 982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
 983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         of Transmitter and Receiver
 985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
 988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
 994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
 995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
 997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
 999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
1002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
1003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
1004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
1007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
1008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
1009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
1010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
1012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
1014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
1018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
1019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
1020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
1021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
1022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
1023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
1031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
1033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  /tmp/cc5eZ8De.s 			page 34


1035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
1037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
1038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
1039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
1046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
1048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
1052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
1053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
1055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
1056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
1057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
1060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
1062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
1066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
1067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
1070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
1071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
1073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
1075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
1079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
1080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
1081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
1089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
1091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  /tmp/cc5eZ8De.s 			page 35


1092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
1095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
1096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
1097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
1104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
1106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
1110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
1111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
1115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_MME);
1117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
1121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
1122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
1126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
1128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
1132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
1133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
1137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME)) ? 1UL : 0UL);
1139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
1143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
1144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/cc5eZ8De.s 			page 36


1149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
1151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
1153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Oversampling mode
1157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
1158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
1164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
1166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
1170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
1173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
1175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
1180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
1182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
1186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
1187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
1190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
1196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
1198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
1202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
1205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cc5eZ8De.s 			page 37


1206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
1207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
1212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
1214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
1218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
1221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
1227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
1229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
1233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
1236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
1238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
1243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
1245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
1249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
1252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
1258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
1260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
ARM GAS  /tmp/cc5eZ8De.s 			page 38


1263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
1264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
1268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
1269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
1270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
1271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
1272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
1273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
1275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
1278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
1281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
1286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
1288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
1291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Clock source prescaler for baudrate generator and oversampling
1293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_SetPrescaler
1296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
1315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve the Clock source prescaler for baudrate generator and oversampling
1319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc5eZ8De.s 			page 39


1320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_GetPrescaler
1322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetPrescaler(USART_TypeDef *USARTx)
1338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->PRESC, USART_PRESC_PRESCALER));
1340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
1343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
1345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
1348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
1352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
1358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
1361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc5eZ8De.s 			page 40


1377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN)) ? 1UL : 0UL);
1380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
ARM GAS  /tmp/cc5eZ8De.s 			page 41


1434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                               uint32_t StopBits)
1442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
ARM GAS  /tmp/cc5eZ8De.s 			page 42


1491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cc5eZ8De.s 			page 43


1548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
ARM GAS  /tmp/cc5eZ8De.s 			page 44


1605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN)) ? 1UL : 0UL);
1625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
1658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
ARM GAS  /tmp/cc5eZ8De.s 			page 45


1662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN)) ? 1UL : 0UL);
1693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Address of the USART node.
1697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         for wake up with address mark detection.
1699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         value and CMF flag is set on match)
1709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
ARM GAS  /tmp/cc5eZ8De.s 			page 46


1719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
1735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
ARM GAS  /tmp/cc5eZ8De.s 			page 47


1776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
ARM GAS  /tmp/cc5eZ8De.s 			page 48


1833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT)) ? 1UL : 0UL);
1872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Overrun detection
1876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Overrun detection
1887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/cc5eZ8De.s 			page 49


1890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS) ? 1UL : 0UL);
1905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
1939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
1941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (Baud rate value != 0)
1946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
ARM GAS  /tmp/cc5eZ8De.s 			page 50


1947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
1949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
1951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
1965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
1970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
1971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
1972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Presc
1973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                           uint32_t OverSampling,
1974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                           uint32_t BaudRate)
1975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
1976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                           uint32_t BaudRate)
1978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
1979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
1980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   uint32_t usartdiv;
1981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   register uint32_t brrtemp;
1982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
1983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
1984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   if (PrescalerValue > LL_USART_PRESCALER_DIV256)
1985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
1986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     /* Do not overstep the size of USART_PRESCALER_TAB */
1987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
1988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
1989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
1990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
1992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
1993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
1994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
1995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
1996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
1998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
2000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     USARTx->BRR = brrtemp;
2001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else
2003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
ARM GAS  /tmp/cc5eZ8De.s 			page 51


2004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate
2006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
2008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
2014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
2015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
2016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
2017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
2018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
2020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @if USART_PRESC_PRESCALER
2021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
2022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
2023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
2024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
2025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
2026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
2027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
2028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
2029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
2030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
2031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
2032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
2033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
2034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   @endif
2035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
2036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
2037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
2038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Baud Rate
2039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t P
2042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****                                               uint32_t OverSampling)
2043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
2045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   register uint32_t usartdiv;
2048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
2049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   register uint32_t periphclkpresc = (uint32_t)(PeriphClk / (USART_PRESCALER_TAB[(uint8_t)Prescaler
2051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   usartdiv = USARTx->BRR;
2054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   if (usartdiv == 0U)
2056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     /* Do not perform a division by 0 */
2058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
2060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
ARM GAS  /tmp/cc5eZ8De.s 			page 52


2061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
2062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     if (usartdiv != 0U)
2063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     {
2064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = (periphclkpresc * 2U) / usartdiv;
2066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
2068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     }
2070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   else
2072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   {
2073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
2074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     {
2075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_PRESC_PRESCALER)
2076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = periphclkpresc / usartdiv;
2077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
2078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
2079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_PRESC_PRESCALER */
2080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****     }
2081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   }
2082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (brrresult);
2083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
2087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
2088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
2090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
2093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
2095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
2099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
2100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
2102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
2104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
2106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Block Length value in reception
2110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
2111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
2113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
2116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
ARM GAS  /tmp/cc5eZ8De.s 			page 53


2118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Get Block Length value in reception
2122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
2123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
2127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
2129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
2136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable IrDA mode
2141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
2144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
2148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable IrDA mode
2154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
2157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
2161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
2163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
2167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
2170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
2174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  /tmp/cc5eZ8De.s 			page 54


2175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN)) ? 1UL : 0UL);
2176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
2180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
2183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
2185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
2187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
2190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
2192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
2196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
2199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
2203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
2205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
2207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
2211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
2215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
2217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)PrescalerValue);
2222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
2226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
2230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
ARM GAS  /tmp/cc5eZ8De.s 			page 55


2232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
2234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
2243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
2248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
2251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
2255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
2257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
2261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
2264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
2268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
2270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
2274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
2277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
2281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK)) ? 1UL : 0UL);
2283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Smartcard mode
2287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
ARM GAS  /tmp/cc5eZ8De.s 			page 56


2289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
2290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
2294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Smartcard mode
2300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
2303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
2307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
2309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
2313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
2316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
2320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN)) ? 1UL : 0UL);
2322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
2329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
2330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
2331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
2332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
2333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
2334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
2336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
2339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
2341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc5eZ8De.s 			page 57


2346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
2348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
2350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
2352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
2354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
2358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
2362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
2364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)PrescalerValue);
2369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
2373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
2377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
2379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
2381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
2387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
2391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
2393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
2396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_GT, (uint16_t)(GuardTime << USART_GTPR_GT_Pos));
2398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
2402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
ARM GAS  /tmp/cc5eZ8De.s 			page 58


2403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
2406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
2408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
2410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
2412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
2419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
2424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
2427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
2431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
2437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
2440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL)) ? 1UL : 0UL);
2459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  /tmp/cc5eZ8De.s 			page 59


2460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
2466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_SPI_SLAVE Configuration functions related to SPI Slave feat
2467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable SPI Synchronous Slave mode
2471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_EnableSPISlave
2474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlave(USART_TypeDef *USARTx)
2478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_SLVEN);
2480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable SPI Synchronous Slave mode
2484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_DisableSPISlave
2487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlave(USART_TypeDef *USARTx)
2491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_SLVEN);
2493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if  SPI Synchronous Slave mode is enabled
2497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_IsEnabledSPISlave
2500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlave(USART_TypeDef *USARTx)
2504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_SLVEN) == (USART_CR2_SLVEN)) ? 1UL : 0UL);
2506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable SPI Slave Selection using NSS input pin
2510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   SPI Slave Selection depends on NSS input pin
2513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (The slave is selected when NSS is low and deselected when NSS is high).
2514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_EnableSPISlaveSelect
2515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/cc5eZ8De.s 			page 60


2517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlaveSelect(USART_TypeDef *USARTx)
2519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable SPI Slave Selection using NSS input pin
2525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   SPI Slave will be always selected and NSS input pin will be ignored.
2528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_DisableSPISlaveSelect
2529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlaveSelect(USART_TypeDef *USARTx)
2533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if  SPI Slave Selection depends on NSS input pin
2539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_IsEnabledSPISlaveSelect
2542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlaveSelect(USART_TypeDef *USARTx)
2546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_DIS_NSS) != (USART_CR2_DIS_NSS)) ? 1UL : 0UL);
2548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
2555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  /tmp/cc5eZ8De.s 			page 61


2574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable LIN mode
2592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable LIN mode
2605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN)) ? 1UL : 0UL);
2627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
ARM GAS  /tmp/cc5eZ8De.s 			page 62


2631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2655:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2656:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2657:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2658:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2659:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2660:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2661:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2662:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2663:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2664:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2665:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2666:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2667:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2668:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2669:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2670:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2671:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2672:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2673:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2674:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2675:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2676:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2677:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2678:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2679:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2680:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2681:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2682:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2683:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2684:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2685:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2686:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2687:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  /tmp/cc5eZ8De.s 			page 63


2688:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2689:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2690:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2691:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2692:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2693:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2694:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2695:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2696:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2697:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2698:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2699:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2700:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2701:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2702:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2703:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2704:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2705:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2706:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2707:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2708:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2709:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2710:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2711:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2712:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2713:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2714:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2715:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2716:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2717:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2718:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2719:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2720:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2721:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2722:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2723:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2724:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2725:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2726:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2727:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
2728:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2729:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2730:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2731:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2732:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2733:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2734:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2735:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2736:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2737:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2738:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2739:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2740:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2741:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2742:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2743:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2744:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  /tmp/cc5eZ8De.s 			page 64


2745:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2746:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2747:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2748:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2749:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2750:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2751:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2752:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2753:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2754:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2755:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2756:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2757:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2758:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2759:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2760:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2761:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2762:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
2763:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2764:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2765:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2766:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
2767:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2768:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2769:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2770:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2771:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2772:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2773:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2774:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2775:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2776:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2777:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2778:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2779:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2780:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2781:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2782:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2783:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2784:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2785:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2786:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2787:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2788:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2789:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2790:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2791:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2792:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2793:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2794:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2795:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2796:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2797:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2798:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2799:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2800:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2801:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
ARM GAS  /tmp/cc5eZ8De.s 			page 65


2802:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2803:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2804:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2805:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2806:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2807:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2808:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2809:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2810:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2811:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
2812:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2813:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2814:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2815:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2816:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2817:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2818:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2819:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2820:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2821:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2822:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2823:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2824:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2825:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2826:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2827:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2828:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2829:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2830:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2831:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2832:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2833:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2834:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2835:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2836:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2837:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2838:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2839:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2840:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2841:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2842:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2843:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2844:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2845:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2846:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2847:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2848:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2849:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2850:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2851:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2852:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2853:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2854:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2855:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2856:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2857:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2858:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
ARM GAS  /tmp/cc5eZ8De.s 			page 66


2859:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2860:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2861:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2862:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2863:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2864:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2865:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2866:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2867:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2868:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2869:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2870:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2871:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2872:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2873:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2874:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2875:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2876:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2877:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2878:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2879:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2880:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2881:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2882:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2883:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2884:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2885:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2886:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2887:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2888:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2889:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2890:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2891:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2892:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2893:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2894:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2895:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2896:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2897:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2898:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2899:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2900:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2901:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2902:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2903:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2904:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2905:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2906:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2907:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2908:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2909:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2910:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2911:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2912:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
2913:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2914:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2915:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
ARM GAS  /tmp/cc5eZ8De.s 			page 67


2916:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2917:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2918:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2919:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2920:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2921:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2922:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2923:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2924:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2925:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2926:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2927:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2928:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2929:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2930:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2931:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2932:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2933:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2934:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2935:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2936:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2937:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2938:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2939:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2940:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2941:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2942:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2943:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2944:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2945:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2946:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2947:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2948:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2949:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2950:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2951:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2952:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
2953:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2954:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2955:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2956:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* Synchronous mode is activated by default */
2957:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2958:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2959:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2960:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
2961:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
2962:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
2963:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2964:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2965:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2966:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2967:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2968:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2969:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2970:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2971:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2972:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
ARM GAS  /tmp/cc5eZ8De.s 			page 68


2973:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2974:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2975:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2976:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2977:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2978:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2979:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
2980:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2981:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
2982:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2983:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2984:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2985:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
2986:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
2987:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2988:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
2989:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
2990:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
2991:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2992:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
2993:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2994:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
2995:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
2996:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2997:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2998:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
2999:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
3000:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3001:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3002:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3003:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
3004:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
3005:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
3006:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
3007:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
3008:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
3009:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
3010:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
3011:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
3012:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
3013:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
3014:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
3015:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
3016:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
3017:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
3018:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
3019:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
3020:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         dedicated functions
3021:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
3022:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
3023:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
3024:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
3025:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
3026:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3027:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3028:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3029:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc5eZ8De.s 			page 69


3030:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3031:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
3032:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
3033:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
3034:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3035:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3036:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3037:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3038:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3039:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
3040:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3041:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3042:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
3043:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
3044:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3045:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3046:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3047:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
3048:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
3049:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3050:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3051:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3052:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
3053:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3054:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
3055:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3056:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3057:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3058:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
3059:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
3060:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3061:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3062:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3063:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
3064:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3065:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
3066:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3067:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3068:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3069:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
3070:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
3071:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3072:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3073:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3074:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
3075:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3076:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
3077:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3078:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3079:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3080:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
3081:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
3082:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3083:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3084:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3085:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
3086:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  /tmp/cc5eZ8De.s 			page 70


3087:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
3088:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3089:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3090:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3091:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
3092:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
3093:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3094:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3095:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3096:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
3097:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3098:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
3099:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3100:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3101:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3102:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Legacy define */
3103:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IsActiveFlag_RXNE  LL_USART_IsActiveFlag_RXNE_RXFNE
3104:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3105:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3106:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register or USART RX FIFO Not Empty Flag is set or not
3107:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3108:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3109:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
3110:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3111:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3112:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3113:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
3114:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3115:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
3116:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3117:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3118:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3119:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3120:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
3121:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
3122:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3123:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3124:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3125:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
3126:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3127:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
3128:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3129:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3130:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3131:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3132:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
3133:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
3134:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3135:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3136:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3137:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
3138:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3139:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
3140:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3141:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3142:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3143:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Legacy define */
ARM GAS  /tmp/cc5eZ8De.s 			page 71


3144:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_IsActiveFlag_TXE  LL_USART_IsActiveFlag_TXE_TXFNF
3145:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3146:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3147:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty or USART TX FIFO Not Full Flag is set o
3148:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3149:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3150:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
3151:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3152:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3153:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3154:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
3155:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3156:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
3157:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3158:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3159:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3160:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3161:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
3162:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
3163:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3164:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3165:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3166:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
3167:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3168:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
3169:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3170:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3171:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3172:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3173:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
3174:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3175:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3176:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
3177:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3178:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3179:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3180:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
3181:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3182:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
3183:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3184:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3185:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3186:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
3187:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3188:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3189:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
3190:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3191:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3192:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3193:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
3194:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3195:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF)) ? 1UL : 0UL);
3196:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3197:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3198:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3199:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
3200:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc5eZ8De.s 			page 72


3201:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3202:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
3203:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3204:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3205:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3206:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
3207:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3208:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
3209:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3210:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3211:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3212:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
3213:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
3214:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3215:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3216:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3217:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
3218:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3219:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1UL : 0UL);
3220:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3221:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3222:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3223:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
3224:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3225:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3226:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
3227:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3228:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3229:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3230:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
3231:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3232:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF)) ? 1UL : 0UL);
3233:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3234:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3235:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
3236:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3237:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the SPI Slave Underrun error flag is set or not
3238:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3239:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3240:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          UDR           LL_USART_IsActiveFlag_UDR
3241:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3242:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3243:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3244:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_UDR(USART_TypeDef *USARTx)
3245:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3246:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_UDR) == (USART_ISR_UDR)) ? 1UL : 0UL);
3247:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3248:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3249:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
3250:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3251:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
3252:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
3253:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3254:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
3255:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3256:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3257:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc5eZ8De.s 			page 73


3258:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
3259:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3260:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE)) ? 1UL : 0UL);
3261:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3262:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3263:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3264:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
3265:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
3266:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3267:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
3268:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3269:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3270:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3271:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
3272:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3273:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF)) ? 1UL : 0UL);
3274:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3275:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3276:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3277:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
3278:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
3279:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3280:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3281:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3282:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
3283:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3284:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
3285:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3286:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3287:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3288:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
3289:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
3290:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3291:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3292:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3293:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
3294:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3295:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF)) ? 1UL : 0UL);
3296:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3297:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3298:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3299:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
3300:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
3301:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3302:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3303:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3304:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
3305:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3306:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF)) ? 1UL : 0UL);
3307:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3308:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3309:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3310:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
3311:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
3312:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3313:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3314:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc5eZ8De.s 			page 74


3315:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
3316:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3317:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU)) ? 1UL : 0UL);
3318:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3319:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3320:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3321:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
3322:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3323:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3324:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
3325:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3326:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3327:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3328:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
3329:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3330:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
3331:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3332:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3333:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3334:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
3335:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
3336:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3337:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3338:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3339:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
3340:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3341:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
3342:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3343:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3344:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3345:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
3346:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
3347:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3348:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3349:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3350:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
3351:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3352:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
3353:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3354:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3355:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3356:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3357:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Flag is set or not
3358:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3359:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3360:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXFE          LL_USART_IsActiveFlag_TXFE
3361:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3362:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3363:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3364:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFE(USART_TypeDef *USARTx)
3365:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3366:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFE) == (USART_ISR_TXFE)) ? 1UL : 0UL);
3367:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3368:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3369:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3370:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Flag is set or not
3371:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc5eZ8De.s 			page 75


3372:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3373:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXFF          LL_USART_IsActiveFlag_RXFF
3374:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3375:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3376:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3377:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFF(USART_TypeDef *USARTx)
3378:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3379:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFF) == (USART_ISR_RXFF)) ? 1UL : 0UL);
3380:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3381:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3382:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3383:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3384:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3385:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3386:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Flag is set or not
3387:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TCBGT         LL_USART_IsActiveFlag_TCBGT
3388:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3389:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3390:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3391:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TCBGT(USART_TypeDef *USARTx)
3392:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3393:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TCBGT) == (USART_ISR_TCBGT)) ? 1UL : 0UL);
3394:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3395:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
3396:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3397:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3398:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3399:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Threshold Flag is set or not
3400:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3401:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3402:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          TXFT          LL_USART_IsActiveFlag_TXFT
3403:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3404:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3405:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3406:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFT(USART_TypeDef *USARTx)
3407:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3408:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFT) == (USART_ISR_TXFT)) ? 1UL : 0UL);
3409:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3410:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3411:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3412:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Threshold Flag is set or not
3413:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3414:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3415:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ISR          RXFT          LL_USART_IsActiveFlag_RXFT
3416:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3417:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3418:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3419:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFT(USART_TypeDef *USARTx)
3420:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3421:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFT) == (USART_ISR_RXFT)) ? 1UL : 0UL);
3422:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3423:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3424:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3425:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3426:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
3427:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
3428:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cc5eZ8De.s 			page 76


3429:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3430:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3431:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
3432:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3433:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
3434:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3435:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3436:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3437:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
3438:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
3439:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3440:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3441:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3442:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
3443:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3444:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
3445:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3446:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3447:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3448:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Noise Error detected Flag
3449:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
3450:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3451:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3452:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3453:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
3454:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3455:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NECF);
3456:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3457:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3458:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3459:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
3460:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
3461:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3462:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3463:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3464:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
3465:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3466:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
3467:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3468:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3469:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3470:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
3471:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
3472:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3473:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3474:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3475:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
3476:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3477:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
3478:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3479:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3480:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3481:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3482:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear TX FIFO Empty Flag
3483:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3484:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3485:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          TXFECF        LL_USART_ClearFlag_TXFE
ARM GAS  /tmp/cc5eZ8De.s 			page 77


3486:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3487:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3488:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3489:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
3490:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3491:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TXFECF);
3492:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3493:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3494:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR1_FIFOEN */
3495:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3496:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
3497:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
3498:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3499:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3500:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3501:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
3502:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3503:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
3504:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3505:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3506:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
3507:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Function available only on devices supporting Transmit Complete before Guard Time feature */
3508:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3509:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Smartcard Transmission Complete Before Guard Time Flag
3510:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          TCBGTCF       LL_USART_ClearFlag_TCBGT
3511:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3512:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3513:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3514:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TCBGT(USART_TypeDef *USARTx)
3515:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3516:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCBGTCF);
3517:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3518:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
3519:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3520:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3521:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
3522:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3523:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3524:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
3525:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3526:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3527:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3528:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
3529:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3530:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
3531:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3532:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3533:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3534:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
3535:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3536:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3537:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
3538:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3539:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3540:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3541:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
3542:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
ARM GAS  /tmp/cc5eZ8De.s 			page 78


3543:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
3544:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3545:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3546:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3547:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
3548:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
3549:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3550:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3551:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3552:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
3553:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3554:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
3555:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3556:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3557:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3558:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear End Of Block Flag
3559:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3560:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3561:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
3562:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3563:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3564:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3565:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
3566:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3567:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
3568:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3569:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3570:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR2_SLVEN)
3571:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3572:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear SPI Slave Underrun Flag
3573:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3574:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3575:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          UDRCF         LL_USART_ClearFlag_UDR
3576:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3577:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3578:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3579:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_UDR(USART_TypeDef *USARTx)
3580:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3581:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_UDRCF);
3582:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3583:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3584:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #endif /* USART_CR2_SLVEN */
3585:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3586:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Character Match Flag
3587:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
3588:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3589:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3590:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3591:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
3592:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3593:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
3594:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3595:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3596:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3597:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
3598:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3599:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
ARM GAS  /tmp/cc5eZ8De.s 			page 79


3600:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
3601:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3602:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3603:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3604:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
3605:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3606:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
3607:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3608:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3609:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3610:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @}
3611:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3612:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3613:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
3614:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @{
3615:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3616:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3617:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3618:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
3619:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
3620:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3621:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3622:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3623:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
3624:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3625:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3626:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3627:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3628:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #if defined(USART_CR1_FIFOEN)
3629:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /* Legacy define */
3630:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #define LL_USART_EnableIT_RXNE  LL_USART_EnableIT_RXNE_RXFNE
3631:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3632:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3633:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RX Not Empty and RX FIFO Not Empty Interrupt
3634:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3635:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3636:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
3637:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3638:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3639:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3640:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3641:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3642:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3643:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** }
3644:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** 
3645:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** #else
3646:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** /**
3647:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
3648:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
3649:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @param  USARTx USART Instance
3650:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   * @retval None
3651:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   */
3652:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
 295              		.loc 2 3652 22 view .LVU70
 296              	.LBB9:
3653:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h **** {
3654:Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
ARM GAS  /tmp/cc5eZ8De.s 			page 80


 297              		.loc 2 3654 3 view .LVU71
 298 0028 054A     		ldr	r2, .L17+4
 299 002a 1368     		ldr	r3, [r2]
 300 002c 43F02003 		orr	r3, r3, #32
 301 0030 1360     		str	r3, [r2]
 302              	.LVL7:
 303              		.loc 2 3654 3 is_stmt 0 view .LVU72
 304              	.LBE9:
 305              	.LBE8:
 463:Src/main.c    **** 
 306              		.loc 1 463 1 view .LVU73
 307 0032 08BD     		pop	{r3, pc}
 308              	.L16:
 456:Src/main.c    ****   }
 309              		.loc 1 456 5 is_stmt 1 view .LVU74
 310 0034 FFF7FEFF 		bl	Error_Handler
 311              	.LVL8:
 312 0038 F6E7     		b	.L14
 313              	.L18:
 314 003a 00BF     		.align	2
 315              	.L17:
 316 003c 00000000 		.word	huart2
 317 0040 00440040 		.word	1073759232
 318              		.cfi_endproc
 319              	.LFE509:
 321              		.section	.text.MX_RTC_Init,"ax",%progbits
 322              		.align	1
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu fpv4-sp-d16
 328              	MX_RTC_Init:
 329              	.LFB507:
 305:Src/main.c    **** 
 330              		.loc 1 305 1 view -0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 64
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334 0000 10B5     		push	{r4, lr}
 335              	.LCFI8:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 4, -8
 338              		.cfi_offset 14, -4
 339 0002 90B0     		sub	sp, sp, #64
 340              	.LCFI9:
 341              		.cfi_def_cfa_offset 72
 311:Src/main.c    ****   RTC_DateTypeDef sDate = {0};
 342              		.loc 1 311 3 view .LVU76
 311:Src/main.c    ****   RTC_DateTypeDef sDate = {0};
 343              		.loc 1 311 19 is_stmt 0 view .LVU77
 344 0004 0024     		movs	r4, #0
 345 0006 0B94     		str	r4, [sp, #44]
 346 0008 0C94     		str	r4, [sp, #48]
 347 000a 0D94     		str	r4, [sp, #52]
 348 000c 0E94     		str	r4, [sp, #56]
 349 000e 0F94     		str	r4, [sp, #60]
 312:Src/main.c    ****   RTC_AlarmTypeDef sAlarm = {0};
ARM GAS  /tmp/cc5eZ8De.s 			page 81


 350              		.loc 1 312 3 is_stmt 1 view .LVU78
 312:Src/main.c    ****   RTC_AlarmTypeDef sAlarm = {0};
 351              		.loc 1 312 19 is_stmt 0 view .LVU79
 352 0010 0A94     		str	r4, [sp, #40]
 313:Src/main.c    **** 
 353              		.loc 1 313 3 is_stmt 1 view .LVU80
 313:Src/main.c    **** 
 354              		.loc 1 313 20 is_stmt 0 view .LVU81
 355 0012 2822     		movs	r2, #40
 356 0014 2146     		mov	r1, r4
 357 0016 6846     		mov	r0, sp
 358 0018 FFF7FEFF 		bl	memset
 359              	.LVL9:
 320:Src/main.c    ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 360              		.loc 1 320 3 is_stmt 1 view .LVU82
 320:Src/main.c    ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 361              		.loc 1 320 17 is_stmt 0 view .LVU83
 362 001c 2A48     		ldr	r0, .L29
 363 001e 2B4B     		ldr	r3, .L29+4
 364 0020 0360     		str	r3, [r0]
 321:Src/main.c    ****   hrtc.Init.AsynchPrediv = 127;
 365              		.loc 1 321 3 is_stmt 1 view .LVU84
 321:Src/main.c    ****   hrtc.Init.AsynchPrediv = 127;
 366              		.loc 1 321 24 is_stmt 0 view .LVU85
 367 0022 4460     		str	r4, [r0, #4]
 322:Src/main.c    ****   hrtc.Init.SynchPrediv = 255;
 368              		.loc 1 322 3 is_stmt 1 view .LVU86
 322:Src/main.c    ****   hrtc.Init.SynchPrediv = 255;
 369              		.loc 1 322 26 is_stmt 0 view .LVU87
 370 0024 7F23     		movs	r3, #127
 371 0026 8360     		str	r3, [r0, #8]
 323:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 372              		.loc 1 323 3 is_stmt 1 view .LVU88
 323:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 373              		.loc 1 323 25 is_stmt 0 view .LVU89
 374 0028 FF23     		movs	r3, #255
 375 002a C360     		str	r3, [r0, #12]
 324:Src/main.c    ****   hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 376              		.loc 1 324 3 is_stmt 1 view .LVU90
 324:Src/main.c    ****   hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 377              		.loc 1 324 20 is_stmt 0 view .LVU91
 378 002c 0461     		str	r4, [r0, #16]
 325:Src/main.c    ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 379              		.loc 1 325 3 is_stmt 1 view .LVU92
 325:Src/main.c    ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 380              		.loc 1 325 25 is_stmt 0 view .LVU93
 381 002e 4461     		str	r4, [r0, #20]
 326:Src/main.c    ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 382              		.loc 1 326 3 is_stmt 1 view .LVU94
 326:Src/main.c    ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 383              		.loc 1 326 28 is_stmt 0 view .LVU95
 384 0030 8461     		str	r4, [r0, #24]
 327:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 385              		.loc 1 327 3 is_stmt 1 view .LVU96
 327:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 386              		.loc 1 327 24 is_stmt 0 view .LVU97
 387 0032 C461     		str	r4, [r0, #28]
ARM GAS  /tmp/cc5eZ8De.s 			page 82


 328:Src/main.c    ****   {
 388              		.loc 1 328 3 is_stmt 1 view .LVU98
 328:Src/main.c    ****   {
 389              		.loc 1 328 7 is_stmt 0 view .LVU99
 390 0034 FFF7FEFF 		bl	HAL_RTC_Init
 391              	.LVL10:
 328:Src/main.c    ****   {
 392              		.loc 1 328 6 view .LVU100
 393 0038 0028     		cmp	r0, #0
 394 003a 39D1     		bne	.L25
 395              	.L20:
 339:Src/main.c    ****   sTime.Minutes = 0x0;
 396              		.loc 1 339 3 is_stmt 1 view .LVU101
 339:Src/main.c    ****   sTime.Minutes = 0x0;
 397              		.loc 1 339 15 is_stmt 0 view .LVU102
 398 003c 0023     		movs	r3, #0
 399 003e 8DF82C30 		strb	r3, [sp, #44]
 340:Src/main.c    ****   sTime.Seconds = 0x0;
 400              		.loc 1 340 3 is_stmt 1 view .LVU103
 340:Src/main.c    ****   sTime.Seconds = 0x0;
 401              		.loc 1 340 17 is_stmt 0 view .LVU104
 402 0042 8DF82D30 		strb	r3, [sp, #45]
 341:Src/main.c    ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 403              		.loc 1 341 3 is_stmt 1 view .LVU105
 341:Src/main.c    ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 404              		.loc 1 341 17 is_stmt 0 view .LVU106
 405 0046 8DF82E30 		strb	r3, [sp, #46]
 342:Src/main.c    ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 406              		.loc 1 342 3 is_stmt 1 view .LVU107
 342:Src/main.c    ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 407              		.loc 1 342 24 is_stmt 0 view .LVU108
 408 004a 0E93     		str	r3, [sp, #56]
 343:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 409              		.loc 1 343 3 is_stmt 1 view .LVU109
 343:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 410              		.loc 1 343 24 is_stmt 0 view .LVU110
 411 004c 0F93     		str	r3, [sp, #60]
 344:Src/main.c    ****   {
 412              		.loc 1 344 3 is_stmt 1 view .LVU111
 344:Src/main.c    ****   {
 413              		.loc 1 344 7 is_stmt 0 view .LVU112
 414 004e 0122     		movs	r2, #1
 415 0050 0BA9     		add	r1, sp, #44
 416 0052 1D48     		ldr	r0, .L29
 417 0054 FFF7FEFF 		bl	HAL_RTC_SetTime
 418              	.LVL11:
 344:Src/main.c    ****   {
 419              		.loc 1 344 6 view .LVU113
 420 0058 68BB     		cbnz	r0, .L26
 421              	.L21:
 348:Src/main.c    ****   sDate.Month = RTC_MONTH_JANUARY;
 422              		.loc 1 348 3 is_stmt 1 view .LVU114
 348:Src/main.c    ****   sDate.Month = RTC_MONTH_JANUARY;
 423              		.loc 1 348 17 is_stmt 0 view .LVU115
 424 005a 0122     		movs	r2, #1
 425 005c 8DF82820 		strb	r2, [sp, #40]
 349:Src/main.c    ****   sDate.Date = 0x1;
ARM GAS  /tmp/cc5eZ8De.s 			page 83


 426              		.loc 1 349 3 is_stmt 1 view .LVU116
 349:Src/main.c    ****   sDate.Date = 0x1;
 427              		.loc 1 349 15 is_stmt 0 view .LVU117
 428 0060 8DF82920 		strb	r2, [sp, #41]
 350:Src/main.c    ****   sDate.Year = 0x0;
 429              		.loc 1 350 3 is_stmt 1 view .LVU118
 350:Src/main.c    ****   sDate.Year = 0x0;
 430              		.loc 1 350 14 is_stmt 0 view .LVU119
 431 0064 8DF82A20 		strb	r2, [sp, #42]
 351:Src/main.c    **** 
 432              		.loc 1 351 3 is_stmt 1 view .LVU120
 351:Src/main.c    **** 
 433              		.loc 1 351 14 is_stmt 0 view .LVU121
 434 0068 0023     		movs	r3, #0
 435 006a 8DF82B30 		strb	r3, [sp, #43]
 353:Src/main.c    ****   {
 436              		.loc 1 353 3 is_stmt 1 view .LVU122
 353:Src/main.c    ****   {
 437              		.loc 1 353 7 is_stmt 0 view .LVU123
 438 006e 0AA9     		add	r1, sp, #40
 439 0070 1548     		ldr	r0, .L29
 440 0072 FFF7FEFF 		bl	HAL_RTC_SetDate
 441              	.LVL12:
 353:Src/main.c    ****   {
 442              		.loc 1 353 6 view .LVU124
 443 0076 08BB     		cbnz	r0, .L27
 444              	.L22:
 359:Src/main.c    ****   sAlarm.AlarmTime.Minutes = 0x0;
 445              		.loc 1 359 3 is_stmt 1 view .LVU125
 359:Src/main.c    ****   sAlarm.AlarmTime.Minutes = 0x0;
 446              		.loc 1 359 26 is_stmt 0 view .LVU126
 447 0078 0023     		movs	r3, #0
 448 007a 8DF80030 		strb	r3, [sp]
 360:Src/main.c    ****   sAlarm.AlarmTime.Seconds = 0x30;
 449              		.loc 1 360 3 is_stmt 1 view .LVU127
 360:Src/main.c    ****   sAlarm.AlarmTime.Seconds = 0x30;
 450              		.loc 1 360 28 is_stmt 0 view .LVU128
 451 007e 8DF80130 		strb	r3, [sp, #1]
 361:Src/main.c    ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 452              		.loc 1 361 3 is_stmt 1 view .LVU129
 361:Src/main.c    ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 453              		.loc 1 361 28 is_stmt 0 view .LVU130
 454 0082 3022     		movs	r2, #48
 455 0084 8DF80220 		strb	r2, [sp, #2]
 362:Src/main.c    ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 456              		.loc 1 362 3 is_stmt 1 view .LVU131
 362:Src/main.c    ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 457              		.loc 1 362 31 is_stmt 0 view .LVU132
 458 0088 0193     		str	r3, [sp, #4]
 363:Src/main.c    ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 459              		.loc 1 363 3 is_stmt 1 view .LVU133
 363:Src/main.c    ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 460              		.loc 1 363 35 is_stmt 0 view .LVU134
 461 008a 0393     		str	r3, [sp, #12]
 364:Src/main.c    ****   sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 462              		.loc 1 364 3 is_stmt 1 view .LVU135
 364:Src/main.c    ****   sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
ARM GAS  /tmp/cc5eZ8De.s 			page 84


 463              		.loc 1 364 35 is_stmt 0 view .LVU136
 464 008c 0493     		str	r3, [sp, #16]
 365:Src/main.c    ****                               |RTC_ALARMMASK_MINUTES;
 465              		.loc 1 365 3 is_stmt 1 view .LVU137
 365:Src/main.c    ****                               |RTC_ALARMMASK_MINUTES;
 466              		.loc 1 365 20 is_stmt 0 view .LVU138
 467 008e 104A     		ldr	r2, .L29+8
 468 0090 0592     		str	r2, [sp, #20]
 367:Src/main.c    ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 469              		.loc 1 367 3 is_stmt 1 view .LVU139
 367:Src/main.c    ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 470              		.loc 1 367 29 is_stmt 0 view .LVU140
 471 0092 0693     		str	r3, [sp, #24]
 368:Src/main.c    ****   sAlarm.AlarmDateWeekDay = 0x1;
 472              		.loc 1 368 3 is_stmt 1 view .LVU141
 368:Src/main.c    ****   sAlarm.AlarmDateWeekDay = 0x1;
 473              		.loc 1 368 30 is_stmt 0 view .LVU142
 474 0094 0793     		str	r3, [sp, #28]
 369:Src/main.c    ****   sAlarm.Alarm = RTC_ALARM_A;
 475              		.loc 1 369 3 is_stmt 1 view .LVU143
 369:Src/main.c    ****   sAlarm.Alarm = RTC_ALARM_A;
 476              		.loc 1 369 27 is_stmt 0 view .LVU144
 477 0096 0122     		movs	r2, #1
 478 0098 8DF82020 		strb	r2, [sp, #32]
 370:Src/main.c    ****   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 479              		.loc 1 370 3 is_stmt 1 view .LVU145
 370:Src/main.c    ****   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 480              		.loc 1 370 16 is_stmt 0 view .LVU146
 481 009c 4FF48073 		mov	r3, #256
 482 00a0 0993     		str	r3, [sp, #36]
 371:Src/main.c    ****   {
 483              		.loc 1 371 3 is_stmt 1 view .LVU147
 371:Src/main.c    ****   {
 484              		.loc 1 371 7 is_stmt 0 view .LVU148
 485 00a2 6946     		mov	r1, sp
 486 00a4 0848     		ldr	r0, .L29
 487 00a6 FFF7FEFF 		bl	HAL_RTC_SetAlarm_IT
 488              	.LVL13:
 371:Src/main.c    ****   {
 489              		.loc 1 371 6 view .LVU149
 490 00aa 50B9     		cbnz	r0, .L28
 491              	.L19:
 379:Src/main.c    **** 
 492              		.loc 1 379 1 view .LVU150
 493 00ac 10B0     		add	sp, sp, #64
 494              	.LCFI10:
 495              		.cfi_remember_state
 496              		.cfi_def_cfa_offset 8
 497              		@ sp needed
 498 00ae 10BD     		pop	{r4, pc}
 499              	.L25:
 500              	.LCFI11:
 501              		.cfi_restore_state
 330:Src/main.c    ****   }
 502              		.loc 1 330 5 is_stmt 1 view .LVU151
 503 00b0 FFF7FEFF 		bl	Error_Handler
 504              	.LVL14:
ARM GAS  /tmp/cc5eZ8De.s 			page 85


 505 00b4 C2E7     		b	.L20
 506              	.L26:
 346:Src/main.c    ****   }
 507              		.loc 1 346 5 view .LVU152
 508 00b6 FFF7FEFF 		bl	Error_Handler
 509              	.LVL15:
 510 00ba CEE7     		b	.L21
 511              	.L27:
 355:Src/main.c    ****   }
 512              		.loc 1 355 5 view .LVU153
 513 00bc FFF7FEFF 		bl	Error_Handler
 514              	.LVL16:
 515 00c0 DAE7     		b	.L22
 516              	.L28:
 373:Src/main.c    ****   }
 517              		.loc 1 373 5 view .LVU154
 518 00c2 FFF7FEFF 		bl	Error_Handler
 519              	.LVL17:
 379:Src/main.c    **** 
 520              		.loc 1 379 1 is_stmt 0 view .LVU155
 521 00c6 F1E7     		b	.L19
 522              	.L30:
 523              		.align	2
 524              	.L29:
 525 00c8 00000000 		.word	hrtc
 526 00cc 00280040 		.word	1073752064
 527 00d0 00808080 		.word	-2139062272
 528              		.cfi_endproc
 529              	.LFE507:
 531              		.section	.text.MX_ADC1_Init,"ax",%progbits
 532              		.align	1
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv4-sp-d16
 538              	MX_ADC1_Init:
 539              	.LFB506:
 231:Src/main.c    **** 
 540              		.loc 1 231 1 is_stmt 1 view -0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 24
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544 0000 00B5     		push	{lr}
 545              	.LCFI12:
 546              		.cfi_def_cfa_offset 4
 547              		.cfi_offset 14, -4
 548 0002 87B0     		sub	sp, sp, #28
 549              	.LCFI13:
 550              		.cfi_def_cfa_offset 32
 237:Src/main.c    **** 
 551              		.loc 1 237 3 view .LVU157
 237:Src/main.c    **** 
 552              		.loc 1 237 26 is_stmt 0 view .LVU158
 553 0004 0023     		movs	r3, #0
 554 0006 0093     		str	r3, [sp]
 555 0008 0193     		str	r3, [sp, #4]
 556 000a 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/cc5eZ8De.s 			page 86


 557 000c 0393     		str	r3, [sp, #12]
 558 000e 0493     		str	r3, [sp, #16]
 559 0010 0593     		str	r3, [sp, #20]
 244:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 560              		.loc 1 244 3 is_stmt 1 view .LVU159
 244:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 561              		.loc 1 244 18 is_stmt 0 view .LVU160
 562 0012 2848     		ldr	r0, .L41
 563 0014 284A     		ldr	r2, .L41+4
 564 0016 0260     		str	r2, [r0]
 245:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 565              		.loc 1 245 3 is_stmt 1 view .LVU161
 245:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 566              		.loc 1 245 29 is_stmt 0 view .LVU162
 567 0018 4FF40022 		mov	r2, #524288
 568 001c 4260     		str	r2, [r0, #4]
 246:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 569              		.loc 1 246 3 is_stmt 1 view .LVU163
 246:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 570              		.loc 1 246 25 is_stmt 0 view .LVU164
 571 001e 8360     		str	r3, [r0, #8]
 247:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 572              		.loc 1 247 3 is_stmt 1 view .LVU165
 247:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 573              		.loc 1 247 24 is_stmt 0 view .LVU166
 574 0020 C360     		str	r3, [r0, #12]
 248:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 575              		.loc 1 248 3 is_stmt 1 view .LVU167
 248:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 576              		.loc 1 248 27 is_stmt 0 view .LVU168
 577 0022 0122     		movs	r2, #1
 578 0024 0261     		str	r2, [r0, #16]
 249:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 579              		.loc 1 249 3 is_stmt 1 view .LVU169
 249:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 580              		.loc 1 249 27 is_stmt 0 view .LVU170
 581 0026 0821     		movs	r1, #8
 582 0028 4161     		str	r1, [r0, #20]
 250:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 583              		.loc 1 250 3 is_stmt 1 view .LVU171
 250:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 584              		.loc 1 250 31 is_stmt 0 view .LVU172
 585 002a 0376     		strb	r3, [r0, #24]
 251:Src/main.c    ****   hadc1.Init.NbrOfConversion = 3;
 586              		.loc 1 251 3 is_stmt 1 view .LVU173
 251:Src/main.c    ****   hadc1.Init.NbrOfConversion = 3;
 587              		.loc 1 251 33 is_stmt 0 view .LVU174
 588 002c 4276     		strb	r2, [r0, #25]
 252:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 589              		.loc 1 252 3 is_stmt 1 view .LVU175
 252:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 590              		.loc 1 252 30 is_stmt 0 view .LVU176
 591 002e 0322     		movs	r2, #3
 592 0030 C261     		str	r2, [r0, #28]
 253:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 593              		.loc 1 253 3 is_stmt 1 view .LVU177
 253:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
ARM GAS  /tmp/cc5eZ8De.s 			page 87


 594              		.loc 1 253 36 is_stmt 0 view .LVU178
 595 0032 80F82030 		strb	r3, [r0, #32]
 254:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 596              		.loc 1 254 3 is_stmt 1 view .LVU179
 254:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 597              		.loc 1 254 31 is_stmt 0 view .LVU180
 598 0036 8362     		str	r3, [r0, #40]
 255:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 599              		.loc 1 255 3 is_stmt 1 view .LVU181
 255:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 600              		.loc 1 255 35 is_stmt 0 view .LVU182
 601 0038 C362     		str	r3, [r0, #44]
 256:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 602              		.loc 1 256 3 is_stmt 1 view .LVU183
 256:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 603              		.loc 1 256 36 is_stmt 0 view .LVU184
 604 003a 80F83030 		strb	r3, [r0, #48]
 257:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 605              		.loc 1 257 3 is_stmt 1 view .LVU185
 257:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 606              		.loc 1 257 22 is_stmt 0 view .LVU186
 607 003e 4363     		str	r3, [r0, #52]
 258:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 608              		.loc 1 258 3 is_stmt 1 view .LVU187
 258:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 609              		.loc 1 258 31 is_stmt 0 view .LVU188
 610 0040 80F83830 		strb	r3, [r0, #56]
 259:Src/main.c    ****   {
 611              		.loc 1 259 3 is_stmt 1 view .LVU189
 259:Src/main.c    ****   {
 612              		.loc 1 259 7 is_stmt 0 view .LVU190
 613 0044 FFF7FEFF 		bl	HAL_ADC_Init
 614              	.LVL18:
 259:Src/main.c    ****   {
 615              		.loc 1 259 6 view .LVU191
 616 0048 40BB     		cbnz	r0, .L37
 617              	.L32:
 265:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 618              		.loc 1 265 3 is_stmt 1 view .LVU192
 265:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 619              		.loc 1 265 19 is_stmt 0 view .LVU193
 620 004a 1C4B     		ldr	r3, .L41+8
 621 004c 0093     		str	r3, [sp]
 266:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 622              		.loc 1 266 3 is_stmt 1 view .LVU194
 266:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 623              		.loc 1 266 16 is_stmt 0 view .LVU195
 624 004e 0623     		movs	r3, #6
 625 0050 0193     		str	r3, [sp, #4]
 267:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 626              		.loc 1 267 3 is_stmt 1 view .LVU196
 267:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 627              		.loc 1 267 24 is_stmt 0 view .LVU197
 628 0052 0023     		movs	r3, #0
 629 0054 0293     		str	r3, [sp, #8]
 268:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 630              		.loc 1 268 3 is_stmt 1 view .LVU198
ARM GAS  /tmp/cc5eZ8De.s 			page 88


 268:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 631              		.loc 1 268 22 is_stmt 0 view .LVU199
 632 0056 7F22     		movs	r2, #127
 633 0058 0392     		str	r2, [sp, #12]
 269:Src/main.c    ****   sConfig.Offset = 0;
 634              		.loc 1 269 3 is_stmt 1 view .LVU200
 269:Src/main.c    ****   sConfig.Offset = 0;
 635              		.loc 1 269 24 is_stmt 0 view .LVU201
 636 005a 0422     		movs	r2, #4
 637 005c 0492     		str	r2, [sp, #16]
 270:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 638              		.loc 1 270 3 is_stmt 1 view .LVU202
 270:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 639              		.loc 1 270 18 is_stmt 0 view .LVU203
 640 005e 0593     		str	r3, [sp, #20]
 271:Src/main.c    ****   {
 641              		.loc 1 271 3 is_stmt 1 view .LVU204
 271:Src/main.c    ****   {
 642              		.loc 1 271 7 is_stmt 0 view .LVU205
 643 0060 6946     		mov	r1, sp
 644 0062 1448     		ldr	r0, .L41
 645 0064 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 646              	.LVL19:
 271:Src/main.c    ****   {
 647              		.loc 1 271 6 view .LVU206
 648 0068 D8B9     		cbnz	r0, .L38
 649              	.L33:
 277:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 650              		.loc 1 277 3 is_stmt 1 view .LVU207
 277:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 651              		.loc 1 277 19 is_stmt 0 view .LVU208
 652 006a 154B     		ldr	r3, .L41+12
 653 006c 0093     		str	r3, [sp]
 278:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 654              		.loc 1 278 3 is_stmt 1 view .LVU209
 278:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 655              		.loc 1 278 16 is_stmt 0 view .LVU210
 656 006e 0C23     		movs	r3, #12
 657 0070 0193     		str	r3, [sp, #4]
 279:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 658              		.loc 1 279 3 is_stmt 1 view .LVU211
 279:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 659              		.loc 1 279 24 is_stmt 0 view .LVU212
 660 0072 0623     		movs	r3, #6
 661 0074 0293     		str	r3, [sp, #8]
 280:Src/main.c    ****   {
 662              		.loc 1 280 3 is_stmt 1 view .LVU213
 280:Src/main.c    ****   {
 663              		.loc 1 280 7 is_stmt 0 view .LVU214
 664 0076 6946     		mov	r1, sp
 665 0078 0E48     		ldr	r0, .L41
 666 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 667              	.LVL20:
 280:Src/main.c    ****   {
 668              		.loc 1 280 6 view .LVU215
 669 007e 98B9     		cbnz	r0, .L39
 670              	.L34:
ARM GAS  /tmp/cc5eZ8De.s 			page 89


 286:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 671              		.loc 1 286 3 is_stmt 1 view .LVU216
 286:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 672              		.loc 1 286 19 is_stmt 0 view .LVU217
 673 0080 104B     		ldr	r3, .L41+16
 674 0082 0093     		str	r3, [sp]
 287:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 675              		.loc 1 287 3 is_stmt 1 view .LVU218
 287:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 676              		.loc 1 287 16 is_stmt 0 view .LVU219
 677 0084 1223     		movs	r3, #18
 678 0086 0193     		str	r3, [sp, #4]
 288:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 679              		.loc 1 288 3 is_stmt 1 view .LVU220
 288:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 680              		.loc 1 288 24 is_stmt 0 view .LVU221
 681 0088 0023     		movs	r3, #0
 682 008a 0293     		str	r3, [sp, #8]
 289:Src/main.c    ****   {
 683              		.loc 1 289 3 is_stmt 1 view .LVU222
 289:Src/main.c    ****   {
 684              		.loc 1 289 7 is_stmt 0 view .LVU223
 685 008c 6946     		mov	r1, sp
 686 008e 0948     		ldr	r0, .L41
 687 0090 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 688              	.LVL21:
 289:Src/main.c    ****   {
 689              		.loc 1 289 6 view .LVU224
 690 0094 58B9     		cbnz	r0, .L40
 691              	.L31:
 297:Src/main.c    **** 
 692              		.loc 1 297 1 view .LVU225
 693 0096 07B0     		add	sp, sp, #28
 694              	.LCFI14:
 695              		.cfi_remember_state
 696              		.cfi_def_cfa_offset 4
 697              		@ sp needed
 698 0098 5DF804FB 		ldr	pc, [sp], #4
 699              	.L37:
 700              	.LCFI15:
 701              		.cfi_restore_state
 261:Src/main.c    ****   }
 702              		.loc 1 261 5 is_stmt 1 view .LVU226
 703 009c FFF7FEFF 		bl	Error_Handler
 704              	.LVL22:
 705 00a0 D3E7     		b	.L32
 706              	.L38:
 273:Src/main.c    ****   }
 707              		.loc 1 273 5 view .LVU227
 708 00a2 FFF7FEFF 		bl	Error_Handler
 709              	.LVL23:
 710 00a6 E0E7     		b	.L33
 711              	.L39:
 282:Src/main.c    ****   }
 712              		.loc 1 282 5 view .LVU228
 713 00a8 FFF7FEFF 		bl	Error_Handler
 714              	.LVL24:
ARM GAS  /tmp/cc5eZ8De.s 			page 90


 715 00ac E8E7     		b	.L34
 716              	.L40:
 291:Src/main.c    ****   }
 717              		.loc 1 291 5 view .LVU229
 718 00ae FFF7FEFF 		bl	Error_Handler
 719              	.LVL25:
 297:Src/main.c    **** 
 720              		.loc 1 297 1 is_stmt 0 view .LVU230
 721 00b2 F0E7     		b	.L31
 722              	.L42:
 723              		.align	2
 724              	.L41:
 725 00b4 00000000 		.word	hadc1
 726 00b8 00000450 		.word	1342439424
 727 00bc 01000080 		.word	-2147483647
 728 00c0 000052C7 		.word	-950927360
 729 00c4 000084CB 		.word	-880541696
 730              		.cfi_endproc
 731              	.LFE506:
 733              		.section	.text.MX_TIM2_Init,"ax",%progbits
 734              		.align	1
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	MX_TIM2_Init:
 741              	.LFB508:
 387:Src/main.c    **** 
 742              		.loc 1 387 1 is_stmt 1 view -0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 32
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746 0000 00B5     		push	{lr}
 747              	.LCFI16:
 748              		.cfi_def_cfa_offset 4
 749              		.cfi_offset 14, -4
 750 0002 89B0     		sub	sp, sp, #36
 751              	.LCFI17:
 752              		.cfi_def_cfa_offset 40
 393:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 753              		.loc 1 393 3 view .LVU232
 393:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 754              		.loc 1 393 27 is_stmt 0 view .LVU233
 755 0004 0023     		movs	r3, #0
 756 0006 0593     		str	r3, [sp, #20]
 757 0008 0693     		str	r3, [sp, #24]
 758 000a 0793     		str	r3, [sp, #28]
 394:Src/main.c    **** 
 759              		.loc 1 394 3 is_stmt 1 view .LVU234
 394:Src/main.c    **** 
 760              		.loc 1 394 22 is_stmt 0 view .LVU235
 761 000c 0193     		str	r3, [sp, #4]
 762 000e 0293     		str	r3, [sp, #8]
 763 0010 0393     		str	r3, [sp, #12]
 764 0012 0493     		str	r3, [sp, #16]
 399:Src/main.c    ****   htim2.Init.Prescaler = 0;
 765              		.loc 1 399 3 is_stmt 1 view .LVU236
ARM GAS  /tmp/cc5eZ8De.s 			page 91


 399:Src/main.c    ****   htim2.Init.Prescaler = 0;
 766              		.loc 1 399 18 is_stmt 0 view .LVU237
 767 0014 1748     		ldr	r0, .L51
 768 0016 4FF08042 		mov	r2, #1073741824
 769 001a 0260     		str	r2, [r0]
 400:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 770              		.loc 1 400 3 is_stmt 1 view .LVU238
 400:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 771              		.loc 1 400 24 is_stmt 0 view .LVU239
 772 001c 4360     		str	r3, [r0, #4]
 401:Src/main.c    ****   htim2.Init.Period = 65535;
 773              		.loc 1 401 3 is_stmt 1 view .LVU240
 401:Src/main.c    ****   htim2.Init.Period = 65535;
 774              		.loc 1 401 26 is_stmt 0 view .LVU241
 775 001e 8360     		str	r3, [r0, #8]
 402:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 776              		.loc 1 402 3 is_stmt 1 view .LVU242
 402:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 777              		.loc 1 402 21 is_stmt 0 view .LVU243
 778 0020 4FF6FF72 		movw	r2, #65535
 779 0024 C260     		str	r2, [r0, #12]
 403:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 780              		.loc 1 403 3 is_stmt 1 view .LVU244
 403:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 781              		.loc 1 403 28 is_stmt 0 view .LVU245
 782 0026 0361     		str	r3, [r0, #16]
 404:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 783              		.loc 1 404 3 is_stmt 1 view .LVU246
 404:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 784              		.loc 1 404 32 is_stmt 0 view .LVU247
 785 0028 8361     		str	r3, [r0, #24]
 405:Src/main.c    ****   {
 786              		.loc 1 405 3 is_stmt 1 view .LVU248
 405:Src/main.c    ****   {
 787              		.loc 1 405 7 is_stmt 0 view .LVU249
 788 002a FFF7FEFF 		bl	HAL_TIM_IC_Init
 789              	.LVL26:
 405:Src/main.c    ****   {
 790              		.loc 1 405 6 view .LVU250
 791 002e C0B9     		cbnz	r0, .L48
 792              	.L44:
 409:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 793              		.loc 1 409 3 is_stmt 1 view .LVU251
 409:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 794              		.loc 1 409 37 is_stmt 0 view .LVU252
 795 0030 0023     		movs	r3, #0
 796 0032 0593     		str	r3, [sp, #20]
 410:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 797              		.loc 1 410 3 is_stmt 1 view .LVU253
 410:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 798              		.loc 1 410 33 is_stmt 0 view .LVU254
 799 0034 0793     		str	r3, [sp, #28]
 411:Src/main.c    ****   {
 800              		.loc 1 411 3 is_stmt 1 view .LVU255
 411:Src/main.c    ****   {
 801              		.loc 1 411 7 is_stmt 0 view .LVU256
 802 0036 05A9     		add	r1, sp, #20
ARM GAS  /tmp/cc5eZ8De.s 			page 92


 803 0038 0E48     		ldr	r0, .L51
 804 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 805              	.LVL27:
 411:Src/main.c    ****   {
 806              		.loc 1 411 6 view .LVU257
 807 003e 98B9     		cbnz	r0, .L49
 808              	.L45:
 415:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 809              		.loc 1 415 3 is_stmt 1 view .LVU258
 415:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 810              		.loc 1 415 24 is_stmt 0 view .LVU259
 811 0040 0022     		movs	r2, #0
 812 0042 0192     		str	r2, [sp, #4]
 416:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 813              		.loc 1 416 3 is_stmt 1 view .LVU260
 416:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 814              		.loc 1 416 25 is_stmt 0 view .LVU261
 815 0044 0123     		movs	r3, #1
 816 0046 0293     		str	r3, [sp, #8]
 417:Src/main.c    ****   sConfigIC.ICFilter = 0;
 817              		.loc 1 417 3 is_stmt 1 view .LVU262
 417:Src/main.c    ****   sConfigIC.ICFilter = 0;
 818              		.loc 1 417 25 is_stmt 0 view .LVU263
 819 0048 0392     		str	r2, [sp, #12]
 418:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 820              		.loc 1 418 3 is_stmt 1 view .LVU264
 418:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 821              		.loc 1 418 22 is_stmt 0 view .LVU265
 822 004a 0492     		str	r2, [sp, #16]
 419:Src/main.c    ****   {
 823              		.loc 1 419 3 is_stmt 1 view .LVU266
 419:Src/main.c    ****   {
 824              		.loc 1 419 7 is_stmt 0 view .LVU267
 825 004c 01A9     		add	r1, sp, #4
 826 004e 0948     		ldr	r0, .L51
 827 0050 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 828              	.LVL28:
 419:Src/main.c    ****   {
 829              		.loc 1 419 6 view .LVU268
 830 0054 58B9     		cbnz	r0, .L50
 831              	.L46:
 424:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 832              		.loc 1 424 3 is_stmt 1 view .LVU269
 833 0056 0748     		ldr	r0, .L51
 834 0058 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 835              	.LVL29:
 427:Src/main.c    **** 
 836              		.loc 1 427 1 is_stmt 0 view .LVU270
 837 005c 09B0     		add	sp, sp, #36
 838              	.LCFI18:
 839              		.cfi_remember_state
 840              		.cfi_def_cfa_offset 4
 841              		@ sp needed
 842 005e 5DF804FB 		ldr	pc, [sp], #4
 843              	.L48:
 844              	.LCFI19:
 845              		.cfi_restore_state
ARM GAS  /tmp/cc5eZ8De.s 			page 93


 407:Src/main.c    ****   }
 846              		.loc 1 407 5 is_stmt 1 view .LVU271
 847 0062 FFF7FEFF 		bl	Error_Handler
 848              	.LVL30:
 849 0066 E3E7     		b	.L44
 850              	.L49:
 413:Src/main.c    ****   }
 851              		.loc 1 413 5 view .LVU272
 852 0068 FFF7FEFF 		bl	Error_Handler
 853              	.LVL31:
 854 006c E8E7     		b	.L45
 855              	.L50:
 421:Src/main.c    ****   }
 856              		.loc 1 421 5 view .LVU273
 857 006e FFF7FEFF 		bl	Error_Handler
 858              	.LVL32:
 859 0072 F0E7     		b	.L46
 860              	.L52:
 861              		.align	2
 862              	.L51:
 863 0074 00000000 		.word	htim2
 864              		.cfi_endproc
 865              	.LFE508:
 867              		.section	.text.SystemClock_Config,"ax",%progbits
 868              		.align	1
 869              		.global	SystemClock_Config
 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 873              		.fpu fpv4-sp-d16
 875              	SystemClock_Config:
 876              	.LFB505:
 156:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 877              		.loc 1 156 1 view -0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 176
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881 0000 10B5     		push	{r4, lr}
 882              	.LCFI20:
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 4, -8
 885              		.cfi_offset 14, -4
 886 0002 ACB0     		sub	sp, sp, #176
 887              	.LCFI21:
 888              		.cfi_def_cfa_offset 184
 157:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 889              		.loc 1 157 3 view .LVU275
 157:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 890              		.loc 1 157 22 is_stmt 0 view .LVU276
 891 0004 4422     		movs	r2, #68
 892 0006 0021     		movs	r1, #0
 893 0008 1BA8     		add	r0, sp, #108
 894 000a FFF7FEFF 		bl	memset
 895              	.LVL33:
 158:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 896              		.loc 1 158 3 is_stmt 1 view .LVU277
 158:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
ARM GAS  /tmp/cc5eZ8De.s 			page 94


 897              		.loc 1 158 22 is_stmt 0 view .LVU278
 898 000e 0024     		movs	r4, #0
 899 0010 1694     		str	r4, [sp, #88]
 900 0012 1794     		str	r4, [sp, #92]
 901 0014 1894     		str	r4, [sp, #96]
 902 0016 1994     		str	r4, [sp, #100]
 903 0018 1A94     		str	r4, [sp, #104]
 159:Src/main.c    **** 
 904              		.loc 1 159 3 is_stmt 1 view .LVU279
 159:Src/main.c    **** 
 905              		.loc 1 159 28 is_stmt 0 view .LVU280
 906 001a 5422     		movs	r2, #84
 907 001c 2146     		mov	r1, r4
 908 001e 01A8     		add	r0, sp, #4
 909 0020 FFF7FEFF 		bl	memset
 910              	.LVL34:
 163:Src/main.c    ****   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 911              		.loc 1 163 3 is_stmt 1 view .LVU281
 912 0024 FFF7FEFF 		bl	HAL_PWR_EnableBkUpAccess
 913              	.LVL35:
 164:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 914              		.loc 1 164 3 view .LVU282
 915 0028 2D4A     		ldr	r2, .L63
 916 002a D2F89030 		ldr	r3, [r2, #144]
 917 002e 23F01803 		bic	r3, r3, #24
 918 0032 C2F89030 		str	r3, [r2, #144]
 167:Src/main.c    ****                               |RCC_OSCILLATORTYPE_MSI;
 919              		.loc 1 167 3 view .LVU283
 167:Src/main.c    ****                               |RCC_OSCILLATORTYPE_MSI;
 920              		.loc 1 167 36 is_stmt 0 view .LVU284
 921 0036 1C23     		movs	r3, #28
 922 0038 1B93     		str	r3, [sp, #108]
 169:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 923              		.loc 1 169 3 is_stmt 1 view .LVU285
 169:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 924              		.loc 1 169 30 is_stmt 0 view .LVU286
 925 003a 0123     		movs	r3, #1
 926 003c 1D93     		str	r3, [sp, #116]
 170:Src/main.c    ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 927              		.loc 1 170 3 is_stmt 1 view .LVU287
 170:Src/main.c    ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 928              		.loc 1 170 30 is_stmt 0 view .LVU288
 929 003e 2093     		str	r3, [sp, #128]
 171:Src/main.c    ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 930              		.loc 1 171 3 is_stmt 1 view .LVU289
 171:Src/main.c    ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 931              		.loc 1 171 30 is_stmt 0 view .LVU290
 932 0040 2193     		str	r3, [sp, #132]
 172:Src/main.c    ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 933              		.loc 1 172 3 is_stmt 1 view .LVU291
 172:Src/main.c    ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 934              		.loc 1 172 41 is_stmt 0 view .LVU292
 935 0042 2294     		str	r4, [sp, #136]
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 936              		.loc 1 173 3 is_stmt 1 view .LVU293
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 937              		.loc 1 173 35 is_stmt 0 view .LVU294
ARM GAS  /tmp/cc5eZ8De.s 			page 95


 938 0044 6022     		movs	r2, #96
 939 0046 2392     		str	r2, [sp, #140]
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 940              		.loc 1 174 3 is_stmt 1 view .LVU295
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 941              		.loc 1 174 34 is_stmt 0 view .LVU296
 942 0048 0222     		movs	r2, #2
 943 004a 2592     		str	r2, [sp, #148]
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 944              		.loc 1 175 3 is_stmt 1 view .LVU297
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 945              		.loc 1 175 35 is_stmt 0 view .LVU298
 946 004c 2693     		str	r3, [sp, #152]
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 16;
 947              		.loc 1 176 3 is_stmt 1 view .LVU299
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 16;
 948              		.loc 1 176 30 is_stmt 0 view .LVU300
 949 004e 2793     		str	r3, [sp, #156]
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 950              		.loc 1 177 3 is_stmt 1 view .LVU301
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 951              		.loc 1 177 30 is_stmt 0 view .LVU302
 952 0050 1023     		movs	r3, #16
 953 0052 2893     		str	r3, [sp, #160]
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 954              		.loc 1 178 3 is_stmt 1 view .LVU303
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 955              		.loc 1 178 30 is_stmt 0 view .LVU304
 956 0054 0723     		movs	r3, #7
 957 0056 2993     		str	r3, [sp, #164]
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 958              		.loc 1 179 3 is_stmt 1 view .LVU305
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 959              		.loc 1 179 30 is_stmt 0 view .LVU306
 960 0058 2A92     		str	r2, [sp, #168]
 180:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 961              		.loc 1 180 3 is_stmt 1 view .LVU307
 180:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 962              		.loc 1 180 30 is_stmt 0 view .LVU308
 963 005a 2B92     		str	r2, [sp, #172]
 181:Src/main.c    ****   {
 964              		.loc 1 181 3 is_stmt 1 view .LVU309
 181:Src/main.c    ****   {
 965              		.loc 1 181 7 is_stmt 0 view .LVU310
 966 005c 1BA8     		add	r0, sp, #108
 967 005e FFF7FEFF 		bl	HAL_RCC_OscConfig
 968              	.LVL36:
 181:Src/main.c    ****   {
 969              		.loc 1 181 6 view .LVU311
 970 0062 0028     		cmp	r0, #0
 971 0064 30D1     		bne	.L59
 972              	.L54:
 187:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 973              		.loc 1 187 3 is_stmt 1 view .LVU312
 187:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 974              		.loc 1 187 31 is_stmt 0 view .LVU313
 975 0066 0F23     		movs	r3, #15
ARM GAS  /tmp/cc5eZ8De.s 			page 96


 976 0068 1693     		str	r3, [sp, #88]
 189:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 977              		.loc 1 189 3 is_stmt 1 view .LVU314
 189:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 978              		.loc 1 189 34 is_stmt 0 view .LVU315
 979 006a 0323     		movs	r3, #3
 980 006c 1793     		str	r3, [sp, #92]
 190:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 981              		.loc 1 190 3 is_stmt 1 view .LVU316
 190:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 982              		.loc 1 190 35 is_stmt 0 view .LVU317
 983 006e 0023     		movs	r3, #0
 984 0070 1893     		str	r3, [sp, #96]
 191:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 985              		.loc 1 191 3 is_stmt 1 view .LVU318
 191:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 986              		.loc 1 191 36 is_stmt 0 view .LVU319
 987 0072 1993     		str	r3, [sp, #100]
 192:Src/main.c    **** 
 988              		.loc 1 192 3 is_stmt 1 view .LVU320
 192:Src/main.c    **** 
 989              		.loc 1 192 36 is_stmt 0 view .LVU321
 990 0074 1A93     		str	r3, [sp, #104]
 194:Src/main.c    ****   {
 991              		.loc 1 194 3 is_stmt 1 view .LVU322
 194:Src/main.c    ****   {
 992              		.loc 1 194 7 is_stmt 0 view .LVU323
 993 0076 0121     		movs	r1, #1
 994 0078 16A8     		add	r0, sp, #88
 995 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 996              	.LVL37:
 194:Src/main.c    ****   {
 997              		.loc 1 194 6 view .LVU324
 998 007e 30BB     		cbnz	r0, .L60
 999              	.L55:
 198:Src/main.c    ****                               |RCC_PERIPHCLK_ADC;
 1000              		.loc 1 198 3 is_stmt 1 view .LVU325
 198:Src/main.c    ****                               |RCC_PERIPHCLK_ADC;
 1001              		.loc 1 198 38 is_stmt 0 view .LVU326
 1002 0080 184B     		ldr	r3, .L63+4
 1003 0082 0193     		str	r3, [sp, #4]
 200:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 1004              		.loc 1 200 3 is_stmt 1 view .LVU327
 200:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 1005              		.loc 1 200 38 is_stmt 0 view .LVU328
 1006 0084 0023     		movs	r3, #0
 1007 0086 0A93     		str	r3, [sp, #40]
 201:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 1008              		.loc 1 201 3 is_stmt 1 view .LVU329
 201:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 1009              		.loc 1 201 35 is_stmt 0 view .LVU330
 1010 0088 4FF08053 		mov	r3, #268435456
 1011 008c 1393     		str	r3, [sp, #76]
 202:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1012              		.loc 1 202 3 is_stmt 1 view .LVU331
 202:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1013              		.loc 1 202 35 is_stmt 0 view .LVU332
ARM GAS  /tmp/cc5eZ8De.s 			page 97


 1014 008e 4FF40073 		mov	r3, #512
 1015 0092 1593     		str	r3, [sp, #84]
 203:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 1016              		.loc 1 203 3 is_stmt 1 view .LVU333
 203:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 1017              		.loc 1 203 39 is_stmt 0 view .LVU334
 1018 0094 0123     		movs	r3, #1
 1019 0096 0293     		str	r3, [sp, #8]
 204:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 1020              		.loc 1 204 3 is_stmt 1 view .LVU335
 204:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 1021              		.loc 1 204 34 is_stmt 0 view .LVU336
 1022 0098 0393     		str	r3, [sp, #12]
 205:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1023              		.loc 1 205 3 is_stmt 1 view .LVU337
 205:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1024              		.loc 1 205 34 is_stmt 0 view .LVU338
 1025 009a 1023     		movs	r3, #16
 1026 009c 0493     		str	r3, [sp, #16]
 206:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1027              		.loc 1 206 3 is_stmt 1 view .LVU339
 206:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1028              		.loc 1 206 34 is_stmt 0 view .LVU340
 1029 009e 0723     		movs	r3, #7
 1030 00a0 0593     		str	r3, [sp, #20]
 207:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1031              		.loc 1 207 3 is_stmt 1 view .LVU341
 207:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1032              		.loc 1 207 34 is_stmt 0 view .LVU342
 1033 00a2 0223     		movs	r3, #2
 1034 00a4 0693     		str	r3, [sp, #24]
 208:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 1035              		.loc 1 208 3 is_stmt 1 view .LVU343
 208:Src/main.c    ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 1036              		.loc 1 208 34 is_stmt 0 view .LVU344
 1037 00a6 0793     		str	r3, [sp, #28]
 209:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1038              		.loc 1 209 3 is_stmt 1 view .LVU345
 209:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1039              		.loc 1 209 41 is_stmt 0 view .LVU346
 1040 00a8 4FF08073 		mov	r3, #16777216
 1041 00ac 0893     		str	r3, [sp, #32]
 210:Src/main.c    ****   {
 1042              		.loc 1 210 3 is_stmt 1 view .LVU347
 210:Src/main.c    ****   {
 1043              		.loc 1 210 7 is_stmt 0 view .LVU348
 1044 00ae 01A8     		add	r0, sp, #4
 1045 00b0 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1046              	.LVL38:
 210:Src/main.c    ****   {
 1047              		.loc 1 210 6 view .LVU349
 1048 00b4 70B9     		cbnz	r0, .L61
 1049              	.L56:
 216:Src/main.c    ****   {
 1050              		.loc 1 216 3 is_stmt 1 view .LVU350
 216:Src/main.c    ****   {
 1051              		.loc 1 216 7 is_stmt 0 view .LVU351
ARM GAS  /tmp/cc5eZ8De.s 			page 98


 1052 00b6 4FF40070 		mov	r0, #512
 1053 00ba FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 1054              	.LVL39:
 216:Src/main.c    ****   {
 1055              		.loc 1 216 6 view .LVU352
 1056 00be 60B9     		cbnz	r0, .L62
 1057              	.L57:
 222:Src/main.c    **** }
 1058              		.loc 1 222 3 is_stmt 1 view .LVU353
 1059 00c0 FFF7FEFF 		bl	HAL_RCCEx_EnableMSIPLLMode
 1060              	.LVL40:
 223:Src/main.c    **** 
 1061              		.loc 1 223 1 is_stmt 0 view .LVU354
 1062 00c4 2CB0     		add	sp, sp, #176
 1063              	.LCFI22:
 1064              		.cfi_remember_state
 1065              		.cfi_def_cfa_offset 8
 1066              		@ sp needed
 1067 00c6 10BD     		pop	{r4, pc}
 1068              	.L59:
 1069              	.LCFI23:
 1070              		.cfi_restore_state
 183:Src/main.c    ****   }
 1071              		.loc 1 183 5 is_stmt 1 view .LVU355
 1072 00c8 FFF7FEFF 		bl	Error_Handler
 1073              	.LVL41:
 1074 00cc CBE7     		b	.L54
 1075              	.L60:
 196:Src/main.c    ****   }
 1076              		.loc 1 196 5 view .LVU356
 1077 00ce FFF7FEFF 		bl	Error_Handler
 1078              	.LVL42:
 1079 00d2 D5E7     		b	.L55
 1080              	.L61:
 212:Src/main.c    ****   }
 1081              		.loc 1 212 5 view .LVU357
 1082 00d4 FFF7FEFF 		bl	Error_Handler
 1083              	.LVL43:
 1084 00d8 EDE7     		b	.L56
 1085              	.L62:
 218:Src/main.c    ****   }
 1086              		.loc 1 218 5 view .LVU358
 1087 00da FFF7FEFF 		bl	Error_Handler
 1088              	.LVL44:
 1089 00de EFE7     		b	.L57
 1090              	.L64:
 1091              		.align	2
 1092              	.L63:
 1093 00e0 00100240 		.word	1073876992
 1094 00e4 02400200 		.word	147458
 1095              		.cfi_endproc
 1096              	.LFE505:
 1098              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1099              		.align	2
 1100              	.LC1:
 1101 0000 466C6173 		.ascii	"Flash initialization failed\015\000"
 1101      6820696E 
ARM GAS  /tmp/cc5eZ8De.s 			page 99


 1101      69746961 
 1101      6C697A61 
 1101      74696F6E 
 1102 001d 000000   		.align	2
 1103              	.LC2:
 1104 0020 73746172 		.ascii	"start\000"
 1104      7400
 1105 0026 0000     		.align	2
 1106              	.LC3:
 1107 0028 57656C63 		.ascii	"Welcome to Nucleo\015\000"
 1107      6F6D6520 
 1107      746F204E 
 1107      75636C65 
 1107      6F0D00
 1108 003b 00       		.align	2
 1109              	.LC4:
 1110 003c 54797065 		.ascii	"Type 'help' to see available commands\015\000"
 1110      20276865 
 1110      6C702720 
 1110      746F2073 
 1110      65652061 
 1111              		.section	.text.main,"ax",%progbits
 1112              		.align	1
 1113              		.global	main
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1117              		.fpu fpv4-sp-d16
 1119              	main:
 1120              	.LFB504:
  85:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1121              		.loc 1 85 1 view -0
 1122              		.cfi_startproc
 1123              		@ Volatile: function does not return.
 1124              		@ args = 0, pretend = 0, frame = 0
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126 0000 08B5     		push	{r3, lr}
 1127              	.LCFI24:
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 3, -8
 1130              		.cfi_offset 14, -4
  93:Src/main.c    **** 
 1131              		.loc 1 93 3 view .LVU360
 1132 0002 FFF7FEFF 		bl	HAL_Init
 1133              	.LVL45:
 100:Src/main.c    **** 
 1134              		.loc 1 100 3 view .LVU361
 1135 0006 FFF7FEFF 		bl	SystemClock_Config
 1136              	.LVL46:
 107:Src/main.c    ****   MX_USART2_UART_Init();
 1137              		.loc 1 107 3 view .LVU362
 1138 000a FFF7FEFF 		bl	MX_GPIO_Init
 1139              	.LVL47:
 108:Src/main.c    ****   MX_RTC_Init();
 1140              		.loc 1 108 3 view .LVU363
 1141 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 1142              	.LVL48:
ARM GAS  /tmp/cc5eZ8De.s 			page 100


 109:Src/main.c    ****   MX_ADC1_Init();
 1143              		.loc 1 109 3 view .LVU364
 1144 0012 FFF7FEFF 		bl	MX_RTC_Init
 1145              	.LVL49:
 110:Src/main.c    ****   MX_DMA_Init();
 1146              		.loc 1 110 3 view .LVU365
 1147 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1148              	.LVL50:
 111:Src/main.c    ****   MX_TIM2_Init();
 1149              		.loc 1 111 3 view .LVU366
 1150 001a FFF7FEFF 		bl	MX_DMA_Init
 1151              	.LVL51:
 112:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1152              		.loc 1 112 3 view .LVU367
 1153 001e FFF7FEFF 		bl	MX_TIM2_Init
 1154              	.LVL52:
 114:Src/main.c    ****   //sends local RTC handler variable to rtc.c file scope
 1155              		.loc 1 114 3 view .LVU368
 1156 0022 1448     		ldr	r0, .L71
 1157 0024 FFF7FEFF 		bl	RetargetInit
 1158              	.LVL53:
 116:Src/main.c    ****   
 1159              		.loc 1 116 3 view .LVU369
 1160 0028 1348     		ldr	r0, .L71+4
 1161 002a FFF7FEFF 		bl	RetargetRTC
 1162              	.LVL54:
 121:Src/main.c    ****     printf("Flash initialization failed\r\n");
 1163              		.loc 1 121 3 view .LVU370
 121:Src/main.c    ****     printf("Flash initialization failed\r\n");
 1164              		.loc 1 121 6 is_stmt 0 view .LVU371
 1165 002e FFF7FEFF 		bl	flash_write_init
 1166              	.LVL55:
 121:Src/main.c    ****     printf("Flash initialization failed\r\n");
 1167              		.loc 1 121 5 view .LVU372
 1168 0032 D0B9     		cbnz	r0, .L70
 1169              	.L66:
 126:Src/main.c    ****   
 1170              		.loc 1 126 73 is_stmt 1 discriminator 1 view .LVU373
 126:Src/main.c    ****   
 1171              		.loc 1 126 9 discriminator 1 view .LVU374
 126:Src/main.c    ****   
 1172              		.loc 1 126 10 is_stmt 0 discriminator 1 view .LVU375
 1173 0034 7F21     		movs	r1, #127
 1174 0036 1148     		ldr	r0, .L71+8
 1175 0038 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 1176              	.LVL56:
 126:Src/main.c    ****   
 1177              		.loc 1 126 9 discriminator 1 view .LVU376
 1178 003c 0028     		cmp	r0, #0
 1179 003e F9D1     		bne	.L66
 129:Src/main.c    ****   printf("Welcome to Nucleo\r\n");
 1180              		.loc 1 129 3 is_stmt 1 view .LVU377
 1181 0040 0F48     		ldr	r0, .L71+12
 1182 0042 FFF7FEFF 		bl	log_entry
 1183              	.LVL57:
 130:Src/main.c    ****   printf("Type 'help' to see available commands\r\n");
 1184              		.loc 1 130 3 view .LVU378
ARM GAS  /tmp/cc5eZ8De.s 			page 101


 1185 0046 0F48     		ldr	r0, .L71+16
 1186 0048 FFF7FEFF 		bl	puts
 1187              	.LVL58:
 131:Src/main.c    **** 
 1188              		.loc 1 131 3 view .LVU379
 1189 004c 0E48     		ldr	r0, .L71+20
 1190 004e FFF7FEFF 		bl	puts
 1191              	.LVL59:
 133:Src/main.c    **** 
 1192              		.loc 1 133 3 view .LVU380
 1193 0052 0022     		movs	r2, #0
 1194 0054 0821     		movs	r1, #8
 1195 0056 0D48     		ldr	r0, .L71+24
 1196 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1197              	.LVL60:
 135:Src/main.c    ****   /* USER CODE END 2 */
 1198              		.loc 1 135 3 view .LVU381
 1199 005c FFF7FEFF 		bl	terminal_line
 1200              	.LVL61:
 1201              	.L68:
 140:Src/main.c    ****   {
 1202              		.loc 1 140 3 discriminator 1 view .LVU382
 145:Src/main.c    ****     alarm_process();
 1203              		.loc 1 145 5 discriminator 1 view .LVU383
 1204 0060 FFF7FEFF 		bl	buf_process
 1205              	.LVL62:
 146:Src/main.c    ****   }
 1206              		.loc 1 146 5 discriminator 1 view .LVU384
 1207 0064 FFF7FEFF 		bl	alarm_process
 1208              	.LVL63:
 140:Src/main.c    ****   {
 1209              		.loc 1 140 9 discriminator 1 view .LVU385
 1210 0068 FAE7     		b	.L68
 1211              	.L70:
 122:Src/main.c    ****     while(1);
 1212              		.loc 1 122 5 view .LVU386
 1213 006a 0948     		ldr	r0, .L71+28
 1214 006c FFF7FEFF 		bl	puts
 1215              	.LVL64:
 1216              	.L67:
 123:Src/main.c    ****   }
 1217              		.loc 1 123 5 discriminator 1 view .LVU387
 123:Src/main.c    ****   }
 1218              		.loc 1 123 13 discriminator 1 view .LVU388
 123:Src/main.c    ****   }
 1219              		.loc 1 123 10 discriminator 1 view .LVU389
 1220 0070 FEE7     		b	.L67
 1221              	.L72:
 1222 0072 00BF     		.align	2
 1223              	.L71:
 1224 0074 00000000 		.word	huart2
 1225 0078 00000000 		.word	hrtc
 1226 007c 00000000 		.word	hadc1
 1227 0080 20000000 		.word	.LC2
 1228 0084 28000000 		.word	.LC3
 1229 0088 3C000000 		.word	.LC4
 1230 008c 00040048 		.word	1207960576
ARM GAS  /tmp/cc5eZ8De.s 			page 102


 1231 0090 00000000 		.word	.LC1
 1232              		.cfi_endproc
 1233              	.LFE504:
 1235              		.comm	huart2,128,4
 1236              		.comm	hdma_tim2_ch1,72,4
 1237              		.comm	htim2,64,4
 1238              		.comm	hrtc,36,4
 1239              		.comm	hadc1,100,4
 1240              		.text
 1241              	.Letext0:
 1242              		.file 3 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major/
 1243              		.file 4 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major/
 1244              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1245              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 1246              		.file 7 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 1247              		.file 8 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 1248              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 1249              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 1250              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 1251              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 1252              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 1253              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 1254              		.file 15 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
 1255              		.file 16 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
 1256              		.file 17 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 1257              		.file 18 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 1258              		.file 19 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 1259              		.file 20 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major
 1260              		.file 21 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major
 1261              		.file 22 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major
 1262              		.file 23 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major
 1263              		.file 24 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major
 1264              		.file 25 "/nfs/nfs5/home/research/hardware/arm2/gcc-arm-embedded/gcc-arm-none-eabi-9-2019-q4-major
 1265              		.file 26 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
 1266              		.file 27 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
 1267              		.file 28 "<built-in>"
 1268              		.file 29 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
 1269              		.file 30 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 1270              		.file 31 "Inc/retarget.h"
 1271              		.file 32 "Inc/rtc.h"
 1272              		.file 33 "Inc/log.h"
 1273              		.file 34 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
 1274              		.file 35 "Inc/buffer.h"
ARM GAS  /tmp/cc5eZ8De.s 			page 103


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5eZ8De.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc5eZ8De.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc5eZ8De.s:130    .text.MX_GPIO_Init:000000000000006c $d
     /tmp/cc5eZ8De.s:136    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc5eZ8De.s:142    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc5eZ8De.s:190    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc5eZ8De.s:195    .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/cc5eZ8De.s:199    .text.Error_Handler:0000000000000000 $t
     /tmp/cc5eZ8De.s:206    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc5eZ8De.s:226    .text.Error_Handler:000000000000000c $d
     /tmp/cc5eZ8De.s:231    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc5eZ8De.s:237    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc5eZ8De.s:316    .text.MX_USART2_UART_Init:000000000000003c $d
                            *COM*:0000000000000080 huart2
     /tmp/cc5eZ8De.s:322    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/cc5eZ8De.s:328    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/cc5eZ8De.s:525    .text.MX_RTC_Init:00000000000000c8 $d
                            *COM*:0000000000000024 hrtc
     /tmp/cc5eZ8De.s:532    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc5eZ8De.s:538    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc5eZ8De.s:725    .text.MX_ADC1_Init:00000000000000b4 $d
                            *COM*:0000000000000064 hadc1
     /tmp/cc5eZ8De.s:734    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc5eZ8De.s:740    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc5eZ8De.s:863    .text.MX_TIM2_Init:0000000000000074 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc5eZ8De.s:868    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc5eZ8De.s:875    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc5eZ8De.s:1093   .text.SystemClock_Config:00000000000000e0 $d
     /tmp/cc5eZ8De.s:1099   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc5eZ8De.s:1112   .text.main:0000000000000000 $t
     /tmp/cc5eZ8De.s:1119   .text.main:0000000000000000 main
     /tmp/cc5eZ8De.s:1224   .text.main:0000000000000074 $d
                            *COM*:0000000000000048 hdma_tim2_ch1

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
puts
HAL_UART_Init
memset
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_RTC_SetAlarm_IT
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_TIM_Base_Start_IT
HAL_PWR_EnableBkUpAccess
HAL_RCC_OscConfig
ARM GAS  /tmp/cc5eZ8De.s 			page 104


HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_PWREx_ControlVoltageScaling
HAL_RCCEx_EnableMSIPLLMode
HAL_Init
RetargetInit
RetargetRTC
flash_write_init
HAL_ADCEx_Calibration_Start
log_entry
terminal_line
buf_process
alarm_process
